<?php
/*
This file has been generated by the Sabai scaffold script. Do not edit this file directly.
If you need to customize the class, use the following file:
plugins/Aggregator/Model/Feed.php
*/
abstract class Plugg_Aggregator_Model_Base_Feed extends Sabai_Model_Entity
{
    public function __construct(Sabai_Model $model)
    {
        parent::__construct('Feed', $model);
        $this->_vars = array('feed_id' => 0, 'feed_created' => 0, 'feed_updated' => 0, 'feed_site_url' => null, 'feed_title' => null, 'feed_description' => null, 'feed_language' => null, 'feed_feed_url' => null, 'feed_favicon_url' => null, 'feed_favicon_hide' => 0, 'feed_last_ping' => 0, 'feed_last_fetch' => 0, 'feed_last_publish' => 0, 'feed_status' => 0, 'feed_author_pref' => 0, 'feed_allow_image' => 0, 'feed_allow_external_resources' => 0, 'feed_host' => null, 'feed_userid' => null, 'feed_item_count' => 0, 'feed_item_last' => 0, 'feed_item_lasttime' => 0);
    }

    public function getUserId()
    {
        return $this->getVar('userid');
    }

    public function assignUser($user)
    {
        $this->_setVar('userid', $user->getId());
    }

    protected function _fetchUser($withData = false)
    {
        if (!isset($this->_objects['User'])) {
            $user_id = $this->getUserId();
            $identities = $this->_model->fetchUserIdentities(array($user_id), $withData);
            $this->_objects['User'] = $identities[$user_id];
        }
        return $this->_objects['User'];
    }

    public function isOwnedBy($user)
    {
        return $this->getUserId() == $user->getId();
    }

    public function getId()
    {
        return $this->getVar('id');
    }

    public function setId($value)
    {
        $this->setVar('id', $value);
    }

    public function getTimeCreated()
    {
        return $this->getVar('created');
    }

    public function getTimeUpdated()
    {
        return $this->getVar('updated');
    }

    public function getItemCount()
    {
        return $this->getVar('item_count');
    }

    public function hasLastItem()
    {
        $last_id = $this->getVar('item_last');
        return !empty($last_id);
    }

    public function addItem(Sabai_Model_Entity $entity)
    {
        if ($entity->getName() != 'Item') return false;

        return $this->_addEntity($entity);
    }

    public function removeItem(Sabai_Model_Entity $entity)
    {
        if ($entity->getName() != 'Item') return;

        return $this->removeItemById($entity->getId());
    }

    public function removeItemById($id)
    {
        return $this->_removeEntityById('item_id', 'Item', $id);
    }

    public function createItem()
    {
        return $this->_createEntity('Item');
    }

    protected function _fetchItems($limit = 0, $offset = 0, $sort = null, $order = null)
    {
        return $this->_fetchEntities('Item', $limit, $offset, $sort, $order);
    }

    protected function _fetchLastItem()
    {
        if (!isset($this->_objects['LastItem']) && $this->hasLastItem()) {
            $this->_objects['LastItem'] = $this->_fetchEntities('Item', 1, 0, 'item_created', 'DESC')->getNext();
        }
        return $this->_objects['LastItem'];
    }

    public function paginateItems($perpage = 10, $sort = null, $order = null)
    {
        return $this->_paginateEntities('Item', $perpage, $sort, $order);
    }

    public function removeItems()
    {
        return $this->_removeEntities('Item');
    }

    public function countItems()
    {
        return $this->_countEntities('Item');
    }

    protected function _getVar($name)
    {
        return $this->_vars['feed_' . $name];
    }

    protected function _setVar($name, $value)
    {
        switch ($name) {
        case 'id':
            $this->_vars['feed_id'] = $value;
            break;
        case 'site_url':
            $this->_vars['feed_site_url'] = trim($value);
            break;
        case 'title':
            $this->_vars['feed_title'] = trim($value);
            break;
        case 'description':
            $this->_vars['feed_description'] = trim($value);
            break;
        case 'language':
            $this->_vars['feed_language'] = trim($value);
            break;
        case 'feed_url':
            $this->_vars['feed_feed_url'] = trim($value);
            break;
        case 'favicon_url':
            $this->_vars['feed_favicon_url'] = trim($value);
            break;
        case 'favicon_hide':
            $this->_vars['feed_favicon_hide'] = $value;
            break;
        case 'last_ping':
            $this->_vars['feed_last_ping'] = $value;
            break;
        case 'last_fetch':
            $this->_vars['feed_last_fetch'] = $value;
            break;
        case 'last_publish':
            $this->_vars['feed_last_publish'] = $value;
            break;
        case 'status':
            $this->_vars['feed_status'] = $value;
            break;
        case 'author_pref':
            $this->_vars['feed_author_pref'] = $value;
            break;
        case 'allow_image':
            $this->_vars['feed_allow_image'] = $value;
            break;
        case 'allow_external_resources':
            $this->_vars['feed_allow_external_resources'] = $value;
            break;
        case 'host':
            $this->_vars['feed_host'] = trim($value);
            break;
        case 'userid':
            $this->_vars['feed_userid'] = trim($value);
            break;
        case 'item_count':
            $this->_vars['feed_item_count'] = $value;
            break;
        case 'item_last':
            $this->_vars['feed_item_last'] = $value;
            break;
        case 'item_lasttime':
            $this->_vars['feed_item_lasttime'] = $value;
            break;
        default:
            trigger_error(sprintf('Error trying to set value for variable %s. This variable is either read-only or does not exist for this entity', $name), E_USER_WARNING);
            return false;
        }
        return true;
    }

    protected function _get($name, $sort, $order)
    {
        switch ($name) {
        case 'site_url':
            return $this->getVar('site_url');
        case 'title':
            return $this->getVar('title');
        case 'description':
            return $this->getVar('description');
        case 'language':
            return $this->getVar('language');
        case 'feed_url':
            return $this->getVar('feed_url');
        case 'favicon_url':
            return $this->getVar('favicon_url');
        case 'favicon_hide':
            return $this->getVar('favicon_hide');
        case 'last_ping':
            return $this->getVar('last_ping');
        case 'last_fetch':
            return $this->getVar('last_fetch');
        case 'last_publish':
            return $this->getVar('last_publish');
        case 'status':
            return $this->getVar('status');
        case 'author_pref':
            return $this->getVar('author_pref');
        case 'allow_image':
            return $this->getVar('allow_image');
        case 'allow_external_resources':
            return $this->getVar('allow_external_resources');
        case 'host':
            return $this->getVar('host');
        case 'Items':
            return $this->_fetchItems(0, 0, $sort, $order);
        case 'LastItem':
            return $this->_fetchLastItem();
        case 'User':
            return $this->_fetchUser();
        case 'UserWithData':
            return $this->_fetchUser(true);
        }
    }

    public function __set($name, $value)
    {
        switch ($name) {
        case 'site_url':
            $this->setVar('site_url', $value);
            break;
        case 'title':
            $this->setVar('title', $value);
            break;
        case 'description':
            $this->setVar('description', $value);
            break;
        case 'language':
            $this->setVar('language', $value);
            break;
        case 'feed_url':
            $this->setVar('feed_url', $value);
            break;
        case 'favicon_url':
            $this->setVar('favicon_url', $value);
            break;
        case 'favicon_hide':
            $this->setVar('favicon_hide', $value);
            break;
        case 'last_ping':
            $this->setVar('last_ping', $value);
            break;
        case 'last_fetch':
            $this->setVar('last_fetch', $value);
            break;
        case 'last_publish':
            $this->setVar('last_publish', $value);
            break;
        case 'status':
            $this->setVar('status', $value);
            break;
        case 'author_pref':
            $this->setVar('author_pref', $value);
            break;
        case 'allow_image':
            $this->setVar('allow_image', $value);
            break;
        case 'allow_external_resources':
            $this->setVar('allow_external_resources', $value);
            break;
        case 'host':
            $this->setVar('host', $value);
            break;
        case 'Items':
            $this->removeItems();
            foreach (array_keys($value) as $i) {
                $this->addItem($value[$i]);
            }
            break;
        }
    }

    public function initVar($name, $value)
    {
        switch ($name) {
        default:
            $this->_vars[$name] = $value;
            break;
        }
    }
}

abstract class Plugg_Aggregator_Model_Base_FeedRepository extends Sabai_Model_EntityRepository
{
    public function __construct(Sabai_Model $model)
    {
        parent::__construct('Feed', $model);
    }
    public function fetchByUser($id, $limit = 0, $offset = 0, $sort = null, $order = null)
    {
        return $this->_fetchByForeign('feed_userid', $id, $limit, $offset, $sort, $order);
    }

    public function paginateByUser($id, $perpage = 10, $sort = null, $order = null)
    {
        return $this->_paginateByEntity('User', $id, $perpage, $sort, $order);
    }

    public function countByUser($id)
    {
        return $this->_countByForeign('feed_userid', $id);
    }

    public function fetchByUserAndCriteria($id, Sabai_Model_Criteria $criteria, $limit = 0, $offset = 0, $sort = null, $order = null)
    {
        return $this->_fetchByForeignAndCriteria('feed_userid', $id, $criteria, $limit, $offset, $sort, $order);
    }

    public function paginateByUserAndCriteria($id, Sabai_Model_Criteria $criteria, $perpage = 10, $sort = null, $order = null)
    {
        return $this->_paginateByEntityAndCriteria('User', $id, $criteria, $perpage, $sort, $order);
    }

    public function countByUserAndCriteria($id, Sabai_Model_Criteria $criteria)
    {
        return $this->_countByForeignAndCriteria('feed_userid', $id, $criteria);
    }

    protected function _getCollectionByRowset(Sabai_DB_Rowset $rs)
    {
        return new Plugg_Aggregator_Model_Base_FeedsByRowset($rs, $this->_model->create('Feed'), $this->_model);
    }

    public function createCollection(array $entities = array())
    {
        return new Plugg_Aggregator_Model_Base_Feeds($this->_model, $entities);
    }
}

class Plugg_Aggregator_Model_Base_FeedsByRowset extends Sabai_Model_EntityCollection_Rowset
{
    public function __construct(Sabai_DB_Rowset $rs, Sabai_Model_Entity $emptyEntity, Sabai_Model $model)
    {
        parent::__construct('Feeds', $rs, $emptyEntity, $model);
    }

    protected function _loadRow(Sabai_Model_Entity $entity, array $row)
    {
        $entity->initVars($row);
    }
}

class Plugg_Aggregator_Model_Base_Feeds extends Sabai_Model_EntityCollection_Array
{
    public function __construct(Sabai_Model $model, array $entities = array())
    {
        parent::__construct($model, 'Feeds', $entities);
    }
}