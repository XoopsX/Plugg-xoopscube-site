<?php
/*
This file has been generated by the Sabai scaffold script. Do not edit this file directly.
If you need to customize the class, use the following file:
pluginsy/Aggregator/Model/FeedGateway.php
*/
abstract class Plugg_Aggregator_Model_Base_FeedGateway extends Sabai_Model_Gateway
{
    public function getName()
    {
        return 'feed';
    }

    public function getFields()
    {
        return array('feed_id' => Sabai_Model::KEY_TYPE_INT, 'feed_created' => Sabai_Model::KEY_TYPE_INT, 'feed_updated' => Sabai_Model::KEY_TYPE_INT, 'feed_site_url' => Sabai_Model::KEY_TYPE_VARCHAR, 'feed_title' => Sabai_Model::KEY_TYPE_VARCHAR, 'feed_description' => Sabai_Model::KEY_TYPE_TEXT, 'feed_language' => Sabai_Model::KEY_TYPE_VARCHAR, 'feed_feed_url' => Sabai_Model::KEY_TYPE_VARCHAR, 'feed_favicon_url' => Sabai_Model::KEY_TYPE_VARCHAR, 'feed_favicon_hide' => Sabai_Model::KEY_TYPE_INT, 'feed_last_ping' => Sabai_Model::KEY_TYPE_INT, 'feed_last_fetch' => Sabai_Model::KEY_TYPE_INT, 'feed_last_publish' => Sabai_Model::KEY_TYPE_INT, 'feed_status' => Sabai_Model::KEY_TYPE_INT, 'feed_author_pref' => Sabai_Model::KEY_TYPE_INT, 'feed_allow_image' => Sabai_Model::KEY_TYPE_INT, 'feed_allow_external_resources' => Sabai_Model::KEY_TYPE_INT, 'feed_host' => Sabai_Model::KEY_TYPE_VARCHAR, 'feed_userid' => Sabai_Model::KEY_TYPE_VARCHAR, 'feed_item_count' => Sabai_Model::KEY_TYPE_INT, 'feed_item_last' => Sabai_Model::KEY_TYPE_INT, 'feed_item_lasttime' => Sabai_Model::KEY_TYPE_INT);
    }

    protected function _getSelectByIdQuery($id, array $fields)
    {
        $fields = empty($fields) ? '*' : implode(', ', $fields);
        return sprintf('SELECT %s FROM %sfeed WHERE feed_id = %d', $fields, $this->_db->getResourcePrefix(), $id);
    }

    protected function _getSelectByCriteriaQuery($criteriaStr, array $fields)
    {
        $fields = empty($fields) ? '*' : implode(', ', $fields);
        return sprintf('SELECT %1$s FROM %2$sfeed WHERE %3$s', $fields, $this->_db->getResourcePrefix(), $criteriaStr);
    }

    protected function _getInsertQuery(array $values)
    {
        $values['feed_created'] = time();
        $values['feed_updated'] = 0;
        $values['feed_item_lasttime'] = $values['feed_created'];
        return sprintf("INSERT INTO %sfeed(feed_created, feed_updated, feed_site_url, feed_title, feed_description, feed_language, feed_feed_url, feed_favicon_url, feed_favicon_hide, feed_last_ping, feed_last_fetch, feed_last_publish, feed_status, feed_author_pref, feed_allow_image, feed_allow_external_resources, feed_host, feed_userid, feed_item_count, feed_item_last, feed_item_lasttime) VALUES(%d, %d, %s, %s, %s, %s, %s, %s, %d, %d, %d, %d, %d, %d, %d, %d, %s, %s, %d, %d, %d)", $this->_db->getResourcePrefix(), $values['feed_created'], $values['feed_updated'], $this->_db->escapeString($values['feed_site_url']), $this->_db->escapeString($values['feed_title']), $this->_db->escapeString($values['feed_description']), $this->_db->escapeString($values['feed_language']), $this->_db->escapeString($values['feed_feed_url']), $this->_db->escapeString($values['feed_favicon_url']), $values['feed_favicon_hide'], $values['feed_last_ping'], $values['feed_last_fetch'], $values['feed_last_publish'], $values['feed_status'], $values['feed_author_pref'], $values['feed_allow_image'], $values['feed_allow_external_resources'], $this->_db->escapeString($values['feed_host']), $this->_db->escapeString($values['feed_userid']), $values['feed_item_count'], $values['feed_item_last'], $values['feed_item_lasttime']);
    }

    protected function _getUpdateQuery($id, array $values)
    {
        $last_update = $values['feed_updated'];
        $values['feed_updated'] = time();
        return sprintf("UPDATE %sfeed SET feed_updated = %d, feed_site_url = %s, feed_title = %s, feed_description = %s, feed_language = %s, feed_feed_url = %s, feed_favicon_url = %s, feed_favicon_hide = %d, feed_last_ping = %d, feed_last_fetch = %d, feed_last_publish = %d, feed_status = %d, feed_author_pref = %d, feed_allow_image = %d, feed_allow_external_resources = %d, feed_host = %s, feed_userid = %s, feed_item_count = %d, feed_item_last = %d, feed_item_lasttime = %d WHERE feed_id = %d AND feed_updated = %d", $this->_db->getResourcePrefix(), $values['feed_updated'], $this->_db->escapeString($values['feed_site_url']), $this->_db->escapeString($values['feed_title']), $this->_db->escapeString($values['feed_description']), $this->_db->escapeString($values['feed_language']), $this->_db->escapeString($values['feed_feed_url']), $this->_db->escapeString($values['feed_favicon_url']), $values['feed_favicon_hide'], $values['feed_last_ping'], $values['feed_last_fetch'], $values['feed_last_publish'], $values['feed_status'], $values['feed_author_pref'], $values['feed_allow_image'], $values['feed_allow_external_resources'], $this->_db->escapeString($values['feed_host']), $this->_db->escapeString($values['feed_userid']), $values['feed_item_count'], $values['feed_item_last'], $values['feed_item_lasttime'], $id, $last_update);
    }

    protected function _getDeleteQuery($id)
    {
        return sprintf('DELETE FROM %1$sfeed WHERE feed_id = %2$d', $this->_db->getResourcePrefix(), $id);
    }

    protected function _getUpdateByCriteriaQuery($criteriaStr, array $sets)
    {
        $sets['feed_updated'] = 'feed_updated=' . time();
        return sprintf('UPDATE %sfeed SET %s WHERE %s', $this->_db->getResourcePrefix(), implode(',', $sets), $criteriaStr);
    }

    protected function _getDeleteByCriteriaQuery($criteriaStr)
    {
        return sprintf('DELETE FROM %1$sfeed WHERE %2$s', $this->_db->getResourcePrefix(), $criteriaStr);
    }

    protected function _getCountByCriteriaQuery($criteriaStr)
    {
        return sprintf('SELECT COUNT(*) FROM %1$sfeed WHERE %2$s', $this->_db->getResourcePrefix(), $criteriaStr);
    }

    protected function _beforeDeleteTrigger1($id, array $old)
    {
        return $this->_db->exec(sprintf('DELETE FROM %1$sitem WHERE %1$sitem.item_feed_id = %2$d', $this->_db->getResourcePrefix(), $id), false);
    }

    protected function _beforeDeleteTrigger($id, array $old)
    {
        if (!$this->_beforeDeleteTrigger1($id, $old)) return false;
        return true;
    }
}