<?php
/*
This file has been generated by the Sabai scaffold script. Do not edit this file directly.
If you need to customize the class, use the following file:
pluginsy/Project/Model/AbuseGateway.php
*/
abstract class Plugg_Project_Model_Base_AbuseGateway extends Sabai_Model_Gateway
{
    public function getName()
    {
        return 'abuse';
    }

    public function getFields()
    {
        return array('abuse_id' => Sabai_Model::KEY_TYPE_INT, 'abuse_created' => Sabai_Model::KEY_TYPE_INT, 'abuse_updated' => Sabai_Model::KEY_TYPE_INT, 'abuse_entity' => Sabai_Model::KEY_TYPE_VARCHAR, 'abuse_entity_id' => Sabai_Model::KEY_TYPE_INT, 'abuse_reason' => Sabai_Model::KEY_TYPE_VARCHAR, 'abuse_comment' => Sabai_Model::KEY_TYPE_TEXT, 'abuse_ip' => Sabai_Model::KEY_TYPE_CHAR, 'abuse_status' => Sabai_Model::KEY_TYPE_INT, 'abuse_project_id' => Sabai_Model::KEY_TYPE_INT_NULL, 'abuse_userid' => Sabai_Model::KEY_TYPE_VARCHAR);
    }

    protected function _getSelectByIdQuery($id, array $fields)
    {
        $fields = empty($fields) ? '*' : implode(', ', $fields);
        return sprintf('SELECT %s FROM %sabuse WHERE abuse_id = %d', $fields, $this->_db->getResourcePrefix(), $id);
    }

    protected function _getSelectByCriteriaQuery($criteriaStr, array $fields)
    {
        $fields = empty($fields) ? '*' : implode(', ', $fields);
        return sprintf('SELECT %1$s FROM %2$sabuse WHERE %3$s', $fields, $this->_db->getResourcePrefix(), $criteriaStr);
    }

    protected function _getInsertQuery(array $values)
    {
        $values['abuse_created'] = time();
        $values['abuse_updated'] = 0;
        $values['abuse_project_id'] = !empty($values['abuse_project_id']) ? intval($values['abuse_project_id']) : 'NULL';
        return sprintf("INSERT INTO %sabuse(abuse_created, abuse_updated, abuse_entity, abuse_entity_id, abuse_reason, abuse_comment, abuse_ip, abuse_status, abuse_project_id, abuse_userid) VALUES(%d, %d, %s, %d, %s, %s, %s, %d, %s, %s)", $this->_db->getResourcePrefix(), $values['abuse_created'], $values['abuse_updated'], $this->_db->escapeString($values['abuse_entity']), $values['abuse_entity_id'], $this->_db->escapeString($values['abuse_reason']), $this->_db->escapeString($values['abuse_comment']), $this->_db->escapeString($values['abuse_ip']), $values['abuse_status'], $values['abuse_project_id'], $this->_db->escapeString($values['abuse_userid']));
    }

    protected function _getUpdateQuery($id, array $values)
    {
        $values['abuse_project_id'] = !empty($values['abuse_project_id']) ? intval($values['abuse_project_id']) : 'NULL';
        $last_update = $values['abuse_updated'];
        $values['abuse_updated'] = time();
        return sprintf("UPDATE %sabuse SET abuse_updated = %d, abuse_entity = %s, abuse_entity_id = %d, abuse_reason = %s, abuse_comment = %s, abuse_ip = %s, abuse_status = %d, abuse_project_id = %s, abuse_userid = %s WHERE abuse_id = %d AND abuse_updated = %d", $this->_db->getResourcePrefix(), $values['abuse_updated'], $this->_db->escapeString($values['abuse_entity']), $values['abuse_entity_id'], $this->_db->escapeString($values['abuse_reason']), $this->_db->escapeString($values['abuse_comment']), $this->_db->escapeString($values['abuse_ip']), $values['abuse_status'], $values['abuse_project_id'], $this->_db->escapeString($values['abuse_userid']), $id, $last_update);
    }

    protected function _getDeleteQuery($id)
    {
        return sprintf('DELETE FROM %1$sabuse WHERE abuse_id = %2$d', $this->_db->getResourcePrefix(), $id);
    }

    protected function _getUpdateByCriteriaQuery($criteriaStr, array $sets)
    {
        $sets['abuse_updated'] = 'abuse_updated=' . time();
        return sprintf('UPDATE %sabuse SET %s WHERE %s', $this->_db->getResourcePrefix(), implode(',', $sets), $criteriaStr);
    }

    protected function _getDeleteByCriteriaQuery($criteriaStr)
    {
        return sprintf('DELETE FROM %1$sabuse WHERE %2$s', $this->_db->getResourcePrefix(), $criteriaStr);
    }

    protected function _getCountByCriteriaQuery($criteriaStr)
    {
        return sprintf('SELECT COUNT(*) FROM %1$sabuse WHERE %2$s', $this->_db->getResourcePrefix(), $criteriaStr);
    }

    protected function _afterInsertTrigger1($id, array $new)
    {
        if (!empty($new['abuse_project_id'])) {
            $this->_db->exec(sprintf('UPDATE %sproject SET project_abuse_count = project_abuse_count + 1, project_abuse_last = %d, project_abuse_lasttime = %d WHERE project_id = %d', $this->_db->getResourcePrefix(), $id, $new['abuse_created'], $new['abuse_project_id']));
        }
    }

    protected function _afterDeleteTrigger1($id, array $old)
    {
        if (!empty($old['abuse_project_id'])) {
            $sql = sprintf('SELECT abuse_id, abuse_created FROM %sabuse WHERE abuse_project_id = %d ORDER BY abuse_created DESC', $this->_db->getResourcePrefix(), $old['abuse_project_id']);
            if (($rs = $this->_db->query($sql, 1, 0)) && ($rs->rowCount() > 0)) {
                $row = $rs->fetchAssoc();
                $this->_db->exec(sprintf('UPDATE %sproject SET project_abuse_count = project_abuse_count - 1, project_abuse_last = %d, project_abuse_lasttime = %d WHERE project_id = %d', $this->_db->getResourcePrefix(), $row['abuse_id'], $row['abuse_created'], $old['abuse_project_id']));
            } else {
                $this->_db->exec(sprintf('UPDATE %sproject SET project_abuse_count = project_abuse_count - 1, project_abuse_last = 0, project_abuse_lasttime = project_created WHERE project_id = %d', $this->_db->getResourcePrefix(), $old['abuse_project_id']));
            }
        }
    }

    protected function _afterUpdateTrigger1($id, array $new, array $old)
    {
        if (empty($old['abuse_project_id']) && !empty($new['abuse_project_id'])) {
            $this->_db->exec(sprintf('UPDATE %sproject SET project_abuse_count = project_abuse_count + 1, project_abuse_last = %d, project_abuse_lasttime = %d WHERE project_id = %d', $this->_db->getResourcePrefix(), $id, $new['abuse_created'], $new['abuse_project_id']));
        } elseif (!empty($old['abuse_project_id']) && empty($new['abuse_project_id'])) {
            $sql = sprintf('SELECT abuse_id, abuse_created FROM %sabuse WHERE abuse_project_id = %d ORDER BY abuse_created DESC', $this->_db->getResourcePrefix(), $old['abuse_project_id']);
            if (($rs = $this->_db->query($sql, 1, 0)) && ($rs->rowCount() > 0)) {
                $row = $rs->fetchAssoc();
                $this->_db->exec(sprintf('UPDATE %sproject SET project_abuse_count = project_abuse_count - 1, project_abuse_last = %d, project_abuse_lasttime = %d WHERE project_id = %d', $this->_db->getResourcePrefix(), $row['abuse_id'], $row['abuse_created'], $old['abuse_project_id']));
            } else {
                $this->_db->exec(sprintf('UPDATE %sproject SET project_abuse_count = project_abuse_count - 1, project_abuse_last = 0, project_abuse_lasttime = project_created WHERE project_id = %d', $this->_db->getResourcePrefix(), $old['abuse_project_id']));
            }
        } elseif ($old['abuse_project_id'] != $new['abuse_project_id']) {
            $sql = sprintf('SELECT abuse_id, abuse_created FROM %sabuse WHERE abuse_project_id = %d ORDER BY abuse_created DESC', $this->_db->getResourcePrefix(), $old['abuse_project_id']);
            if (($rs = $this->_db->query($sql, 1, 0)) && ($rs->rowCount() > 0)) {
                $row = $rs->fetchAssoc();
                $this->_db->exec(sprintf('UPDATE %sproject SET project_abuse_count = project_abuse_count - 1, project_abuse_last = %d, project_abuse_lasttime = %d WHERE project_id = %d', $this->_db->getResourcePrefix(), $row['abuse_id'], $row['abuse_created'], $old['abuse_project_id']));
            } else {
                $this->_db->exec(sprintf('UPDATE %sproject SET project_abuse_count = project_abuse_count - 1, project_abuse_last = 0, project_abuse_lasttime = project_created WHERE project_id = %d', $this->_db->getResourcePrefix(), $old['abuse_project_id']));
            }
            $this->_db->exec(sprintf('UPDATE %sproject SET project_abuse_count = project_abuse_count + 1, project_abuse_last = %d, project_abuse_lasttime = %d WHERE project_id = %d', $this->_db->getResourcePrefix(), $id, $new['abuse_created'], $new['abuse_project_id']));
        }
    }

    protected function _afterInsertTrigger($id, array $new)
    {
        $this->_afterInsertTrigger1($id, $new);
    }

    protected function _afterUpdateTrigger($id, array $new, array $old)
    {
        $this->_afterUpdateTrigger1($id, $new, $old);
    }

    protected function _afterDeleteTrigger($id, array $old)
    {
        $this->_afterDeleteTrigger1($id, $old);
    }
}