<?php
/*
This file has been generated by the Sabai scaffold script. Do not edit this file directly.
If you need to customize the class, use the following file:
plugins/Project/Model/Comment.php
*/
abstract class Plugg_Project_Model_Base_Comment extends Sabai_Model_Entity
{
    public function __construct(Sabai_Model $model)
    {
        parent::__construct('Comment', $model);
        $this->_vars = array('comment_id' => 0, 'comment_created' => 0, 'comment_updated' => 0, 'comment_rating' => 0, 'comment_title' => null, 'comment_body' => null, 'comment_body_html' => null, 'comment_body_filter_id' => 0, 'comment_allow_edit' => 1, 'comment_ip' => null, 'comment_status' => 1, 'comment_project_id' => null, 'comment_userid' => null);
    }

    public function getUserId()
    {
        return $this->getVar('userid');
    }

    public function assignUser($user)
    {
        $this->_setVar('userid', $user->getId());
    }

    protected function _fetchUser($withData = false)
    {
        if (!isset($this->_objects['User'])) {
            $user_id = $this->getUserId();
            $identities = $this->_model->fetchUserIdentities(array($user_id), $withData);
            $this->_objects['User'] = $identities[$user_id];
        }
        return $this->_objects['User'];
    }

    public function isOwnedBy($user)
    {
        return $this->getUserId() == $user->getId();
    }

    public function getId()
    {
        return $this->getVar('id');
    }

    public function setId($value)
    {
        $this->setVar('id', $value);
    }

    public function getTimeCreated()
    {
        return $this->getVar('created');
    }

    public function getTimeUpdated()
    {
        return $this->getVar('updated');
    }

    public function getLabel()
    {
        return $this->getVar('title');
    }

    public function assignProject(Sabai_Model_Entity $entity)
    {
        if ($entity->getName() != 'Project') return false;

        return $this->_assignEntity($entity, 'project_id');
    }

    public function unassignProject()
    {
        return $this->_unassignEntity('Project', 'project_id');
    }

    protected function _fetchProject()
    {
        return $this->_fetchEntity('Project', 'project_id');
    }

    protected function _getVar($name)
    {
        return $this->_vars['comment_' . $name];
    }

    protected function _setVar($name, $value)
    {
        switch ($name) {
        case 'id':
            $this->_vars['comment_id'] = $value;
            break;
        case 'rating':
            $this->_vars['comment_rating'] = $value;
            break;
        case 'title':
            $this->_vars['comment_title'] = trim($value);
            break;
        case 'body':
            $this->_vars['comment_body'] = trim($value);
            break;
        case 'body_html':
            $this->_vars['comment_body_html'] = trim($value);
            break;
        case 'body_filter_id':
            $this->_vars['comment_body_filter_id'] = $value;
            break;
        case 'allow_edit':
            $this->_vars['comment_allow_edit'] = $value;
            break;
        case 'ip':
            $this->_vars['comment_ip'] = trim($value);
            break;
        case 'status':
            $this->_vars['comment_status'] = $value;
            break;
        case 'project_id':
            $this->_vars['comment_project_id'] = $value;
            break;
        case 'userid':
            $this->_vars['comment_userid'] = trim($value);
            break;
        default:
            trigger_error(sprintf('Error trying to set value for variable %s. This variable is either read-only or does not exist for this entity', $name), E_USER_WARNING);
            return false;
        }
        return true;
    }

    protected function _get($name, $sort, $order)
    {
        switch ($name) {
        case 'rating':
            return $this->getVar('rating');
        case 'title':
            return $this->getVar('title');
        case 'body':
            return $this->getVar('body');
        case 'body_html':
            return $this->getVar('body_html');
        case 'body_filter_id':
            return $this->getVar('body_filter_id');
        case 'allow_edit':
            return $this->getVar('allow_edit');
        case 'ip':
            return $this->getVar('ip');
        case 'status':
            return $this->getVar('status');
        case 'Project':
            return $this->_fetchProject();
        case 'User':
            return $this->_fetchUser();
        case 'UserWithData':
            return $this->_fetchUser(true);
        }
    }

    public function __set($name, $value)
    {
        switch ($name) {
        case 'rating':
            $this->setVar('rating', $value);
            break;
        case 'title':
            $this->setVar('title', $value);
            break;
        case 'body':
            $this->setVar('body', $value);
            break;
        case 'body_html':
            $this->setVar('body_html', $value);
            break;
        case 'body_filter_id':
            $this->setVar('body_filter_id', $value);
            break;
        case 'allow_edit':
            $this->setVar('allow_edit', $value);
            break;
        case 'ip':
            $this->setVar('ip', $value);
            break;
        case 'status':
            $this->setVar('status', $value);
            break;
        case 'Project':
            $entity = is_array($value) ? $value[0] : $value;
            $this->assignProject($entity);
            break;
        }
    }

    public function initVar($name, $value)
    {
        switch ($name) {
        default:
            $this->_vars[$name] = $value;
            break;
        }
    }
}

abstract class Plugg_Project_Model_Base_CommentRepository extends Sabai_Model_EntityRepository
{
    public function __construct(Sabai_Model $model)
    {
        parent::__construct('Comment', $model);
    }
    public function fetchByUser($id, $limit = 0, $offset = 0, $sort = null, $order = null)
    {
        return $this->_fetchByForeign('comment_userid', $id, $limit, $offset, $sort, $order);
    }

    public function paginateByUser($id, $perpage = 10, $sort = null, $order = null)
    {
        return $this->_paginateByEntity('User', $id, $perpage, $sort, $order);
    }

    public function countByUser($id)
    {
        return $this->_countByForeign('comment_userid', $id);
    }

    public function fetchByUserAndCriteria($id, Sabai_Model_Criteria $criteria, $limit = 0, $offset = 0, $sort = null, $order = null)
    {
        return $this->_fetchByForeignAndCriteria('comment_userid', $id, $criteria, $limit, $offset, $sort, $order);
    }

    public function paginateByUserAndCriteria($id, Sabai_Model_Criteria $criteria, $perpage = 10, $sort = null, $order = null)
    {
        return $this->_paginateByEntityAndCriteria('User', $id, $criteria, $perpage, $sort, $order);
    }

    public function countByUserAndCriteria($id, Sabai_Model_Criteria $criteria)
    {
        return $this->_countByForeignAndCriteria('comment_userid', $id, $criteria);
    }

    public function fetchByProject($id, $limit = 0, $offset = 0, $sort = null, $order = null)
    {
        return $this->_fetchByForeign('comment_project_id', $id, $limit, $offset, $sort, $order);
    }

    public function paginateByProject($id, $perpage = 10, $sort = null, $order = null)
    {
        return $this->_paginateByEntity('Project', $id, $perpage, $sort, $order);
    }

    public function countByProject($id)
    {
        return $this->_countByForeign('comment_project_id', $id);
    }

    public function fetchByProjectAndCriteria($id, Sabai_Model_Criteria $criteria, $limit = 0, $offset = 0, $sort = null, $order = null)
    {
        return $this->_fetchByForeignAndCriteria('comment_project_id', $id, $criteria, $limit, $offset, $sort, $order);
    }

    public function paginateByProjectAndCriteria($id, Sabai_Model_Criteria $criteria, $perpage = 10, $sort = null, $order = null)
    {
        return $this->_paginateByEntityAndCriteria('Project', $id, $criteria, $perpage, $sort, $order);
    }

    public function countByProjectAndCriteria($id, Sabai_Model_Criteria $criteria)
    {
        return $this->_countByForeignAndCriteria('comment_project_id', $id, $criteria);
    }

    protected function _getCollectionByRowset(Sabai_DB_Rowset $rs)
    {
        return new Plugg_Project_Model_Base_CommentsByRowset($rs, $this->_model->create('Comment'), $this->_model);
    }

    public function createCollection(array $entities = array())
    {
        return new Plugg_Project_Model_Base_Comments($this->_model, $entities);
    }
}

class Plugg_Project_Model_Base_CommentsByRowset extends Sabai_Model_EntityCollection_Rowset
{
    public function __construct(Sabai_DB_Rowset $rs, Sabai_Model_Entity $emptyEntity, Sabai_Model $model)
    {
        parent::__construct('Comments', $rs, $emptyEntity, $model);
    }

    protected function _loadRow(Sabai_Model_Entity $entity, array $row)
    {
        $entity->initVars($row);
    }
}

class Plugg_Project_Model_Base_Comments extends Sabai_Model_EntityCollection_Array
{
    public function __construct(Sabai_Model $model, array $entities = array())
    {
        parent::__construct($model, 'Comments', $entities);
    }
}