<?php
/*
This file has been generated by the Sabai scaffold script. Do not edit this file directly.
If you need to customize the class, use the following file:
pluginsy/Project/Model/CommentGateway.php
*/
abstract class Plugg_Project_Model_Base_CommentGateway extends Sabai_Model_Gateway
{
    public function getName()
    {
        return 'comment';
    }

    public function getFields()
    {
        return array('comment_id' => Sabai_Model::KEY_TYPE_INT, 'comment_created' => Sabai_Model::KEY_TYPE_INT, 'comment_updated' => Sabai_Model::KEY_TYPE_INT, 'comment_rating' => Sabai_Model::KEY_TYPE_INT, 'comment_title' => Sabai_Model::KEY_TYPE_VARCHAR, 'comment_body' => Sabai_Model::KEY_TYPE_TEXT, 'comment_body_html' => Sabai_Model::KEY_TYPE_TEXT, 'comment_body_filter_id' => Sabai_Model::KEY_TYPE_INT, 'comment_allow_edit' => Sabai_Model::KEY_TYPE_INT, 'comment_ip' => Sabai_Model::KEY_TYPE_CHAR, 'comment_status' => Sabai_Model::KEY_TYPE_INT, 'comment_project_id' => Sabai_Model::KEY_TYPE_INT_NULL, 'comment_userid' => Sabai_Model::KEY_TYPE_VARCHAR);
    }

    protected function _getSelectByIdQuery($id, array $fields)
    {
        $fields = empty($fields) ? '*' : implode(', ', $fields);
        return sprintf('SELECT %s FROM %scomment WHERE comment_id = %d', $fields, $this->_db->getResourcePrefix(), $id);
    }

    protected function _getSelectByCriteriaQuery($criteriaStr, array $fields)
    {
        $fields = empty($fields) ? '*' : implode(', ', $fields);
        return sprintf('SELECT %1$s FROM %2$scomment WHERE %3$s', $fields, $this->_db->getResourcePrefix(), $criteriaStr);
    }

    protected function _getInsertQuery(array $values)
    {
        $values['comment_created'] = time();
        $values['comment_updated'] = 0;
        $values['comment_project_id'] = !empty($values['comment_project_id']) ? intval($values['comment_project_id']) : 'NULL';
        return sprintf("INSERT INTO %scomment(comment_created, comment_updated, comment_rating, comment_title, comment_body, comment_body_html, comment_body_filter_id, comment_allow_edit, comment_ip, comment_status, comment_project_id, comment_userid) VALUES(%d, %d, %d, %s, %s, %s, %d, %d, %s, %d, %s, %s)", $this->_db->getResourcePrefix(), $values['comment_created'], $values['comment_updated'], $values['comment_rating'], $this->_db->escapeString($values['comment_title']), $this->_db->escapeString($values['comment_body']), $this->_db->escapeString($values['comment_body_html']), $values['comment_body_filter_id'], $values['comment_allow_edit'], $this->_db->escapeString($values['comment_ip']), $values['comment_status'], $values['comment_project_id'], $this->_db->escapeString($values['comment_userid']));
    }

    protected function _getUpdateQuery($id, array $values)
    {
        $values['comment_project_id'] = !empty($values['comment_project_id']) ? intval($values['comment_project_id']) : 'NULL';
        $last_update = $values['comment_updated'];
        $values['comment_updated'] = time();
        return sprintf("UPDATE %scomment SET comment_updated = %d, comment_rating = %d, comment_title = %s, comment_body = %s, comment_body_html = %s, comment_body_filter_id = %d, comment_allow_edit = %d, comment_ip = %s, comment_status = %d, comment_project_id = %s, comment_userid = %s WHERE comment_id = %d AND comment_updated = %d", $this->_db->getResourcePrefix(), $values['comment_updated'], $values['comment_rating'], $this->_db->escapeString($values['comment_title']), $this->_db->escapeString($values['comment_body']), $this->_db->escapeString($values['comment_body_html']), $values['comment_body_filter_id'], $values['comment_allow_edit'], $this->_db->escapeString($values['comment_ip']), $values['comment_status'], $values['comment_project_id'], $this->_db->escapeString($values['comment_userid']), $id, $last_update);
    }

    protected function _getDeleteQuery($id)
    {
        return sprintf('DELETE FROM %1$scomment WHERE comment_id = %2$d', $this->_db->getResourcePrefix(), $id);
    }

    protected function _getUpdateByCriteriaQuery($criteriaStr, array $sets)
    {
        $sets['comment_updated'] = 'comment_updated=' . time();
        return sprintf('UPDATE %scomment SET %s WHERE %s', $this->_db->getResourcePrefix(), implode(',', $sets), $criteriaStr);
    }

    protected function _getDeleteByCriteriaQuery($criteriaStr)
    {
        return sprintf('DELETE FROM %1$scomment WHERE %2$s', $this->_db->getResourcePrefix(), $criteriaStr);
    }

    protected function _getCountByCriteriaQuery($criteriaStr)
    {
        return sprintf('SELECT COUNT(*) FROM %1$scomment WHERE %2$s', $this->_db->getResourcePrefix(), $criteriaStr);
    }

    protected function _afterInsertTrigger1($id, array $new)
    {
        if (!empty($new['comment_project_id'])) {
            $this->_db->exec(sprintf('UPDATE %sproject SET project_comment_count = project_comment_count + 1, project_comment_last = %d, project_comment_lasttime = %d WHERE project_id = %d', $this->_db->getResourcePrefix(), $id, $new['comment_created'], $new['comment_project_id']));
        }
    }

    protected function _afterDeleteTrigger1($id, array $old)
    {
        if (!empty($old['comment_project_id'])) {
            $sql = sprintf('SELECT comment_id, comment_created FROM %scomment WHERE comment_project_id = %d ORDER BY comment_created DESC', $this->_db->getResourcePrefix(), $old['comment_project_id']);
            if (($rs = $this->_db->query($sql, 1, 0)) && ($rs->rowCount() > 0)) {
                $row = $rs->fetchAssoc();
                $this->_db->exec(sprintf('UPDATE %sproject SET project_comment_count = project_comment_count - 1, project_comment_last = %d, project_comment_lasttime = %d WHERE project_id = %d', $this->_db->getResourcePrefix(), $row['comment_id'], $row['comment_created'], $old['comment_project_id']));
            } else {
                $this->_db->exec(sprintf('UPDATE %sproject SET project_comment_count = project_comment_count - 1, project_comment_last = 0, project_comment_lasttime = project_created WHERE project_id = %d', $this->_db->getResourcePrefix(), $old['comment_project_id']));
            }
        }
    }

    protected function _afterUpdateTrigger1($id, array $new, array $old)
    {
        if (empty($old['comment_project_id']) && !empty($new['comment_project_id'])) {
            $this->_db->exec(sprintf('UPDATE %sproject SET project_comment_count = project_comment_count + 1, project_comment_last = %d, project_comment_lasttime = %d WHERE project_id = %d', $this->_db->getResourcePrefix(), $id, $new['comment_created'], $new['comment_project_id']));
        } elseif (!empty($old['comment_project_id']) && empty($new['comment_project_id'])) {
            $sql = sprintf('SELECT comment_id, comment_created FROM %scomment WHERE comment_project_id = %d ORDER BY comment_created DESC', $this->_db->getResourcePrefix(), $old['comment_project_id']);
            if (($rs = $this->_db->query($sql, 1, 0)) && ($rs->rowCount() > 0)) {
                $row = $rs->fetchAssoc();
                $this->_db->exec(sprintf('UPDATE %sproject SET project_comment_count = project_comment_count - 1, project_comment_last = %d, project_comment_lasttime = %d WHERE project_id = %d', $this->_db->getResourcePrefix(), $row['comment_id'], $row['comment_created'], $old['comment_project_id']));
            } else {
                $this->_db->exec(sprintf('UPDATE %sproject SET project_comment_count = project_comment_count - 1, project_comment_last = 0, project_comment_lasttime = project_created WHERE project_id = %d', $this->_db->getResourcePrefix(), $old['comment_project_id']));
            }
        } elseif ($old['comment_project_id'] != $new['comment_project_id']) {
            $sql = sprintf('SELECT comment_id, comment_created FROM %scomment WHERE comment_project_id = %d ORDER BY comment_created DESC', $this->_db->getResourcePrefix(), $old['comment_project_id']);
            if (($rs = $this->_db->query($sql, 1, 0)) && ($rs->rowCount() > 0)) {
                $row = $rs->fetchAssoc();
                $this->_db->exec(sprintf('UPDATE %sproject SET project_comment_count = project_comment_count - 1, project_comment_last = %d, project_comment_lasttime = %d WHERE project_id = %d', $this->_db->getResourcePrefix(), $row['comment_id'], $row['comment_created'], $old['comment_project_id']));
            } else {
                $this->_db->exec(sprintf('UPDATE %sproject SET project_comment_count = project_comment_count - 1, project_comment_last = 0, project_comment_lasttime = project_created WHERE project_id = %d', $this->_db->getResourcePrefix(), $old['comment_project_id']));
            }
            $this->_db->exec(sprintf('UPDATE %sproject SET project_comment_count = project_comment_count + 1, project_comment_last = %d, project_comment_lasttime = %d WHERE project_id = %d', $this->_db->getResourcePrefix(), $id, $new['comment_created'], $new['comment_project_id']));
        }
    }

    protected function _afterInsertTrigger($id, array $new)
    {
        $this->_afterInsertTrigger1($id, $new);
    }

    protected function _afterUpdateTrigger($id, array $new, array $old)
    {
        $this->_afterUpdateTrigger1($id, $new, $old);
    }

    protected function _afterDeleteTrigger($id, array $old)
    {
        $this->_afterDeleteTrigger1($id, $old);
    }
}