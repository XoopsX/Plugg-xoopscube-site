<?php
/*
This file has been generated by the Sabai scaffold script. Do not edit this file directly.
If you need to customize the class, use the following file:
pluginsy/Project/Model/DeveloperGateway.php
*/
abstract class Plugg_Project_Model_Base_DeveloperGateway extends Sabai_Model_Gateway
{
    public function getName()
    {
        return 'developer';
    }

    public function getFields()
    {
        return array('developer_id' => Sabai_Model::KEY_TYPE_INT, 'developer_created' => Sabai_Model::KEY_TYPE_INT, 'developer_updated' => Sabai_Model::KEY_TYPE_INT, 'developer_role' => Sabai_Model::KEY_TYPE_INT, 'developer_status' => Sabai_Model::KEY_TYPE_INT, 'developer_tasks' => Sabai_Model::KEY_TYPE_VARCHAR, 'developer_project_id' => Sabai_Model::KEY_TYPE_INT_NULL, 'developer_userid' => Sabai_Model::KEY_TYPE_VARCHAR);
    }

    protected function _getSelectByIdQuery($id, array $fields)
    {
        $fields = empty($fields) ? '*' : implode(', ', $fields);
        return sprintf('SELECT %s FROM %sdeveloper WHERE developer_id = %d', $fields, $this->_db->getResourcePrefix(), $id);
    }

    protected function _getSelectByCriteriaQuery($criteriaStr, array $fields)
    {
        $fields = empty($fields) ? '*' : implode(', ', $fields);
        return sprintf('SELECT %1$s FROM %2$sdeveloper WHERE %3$s', $fields, $this->_db->getResourcePrefix(), $criteriaStr);
    }

    protected function _getInsertQuery(array $values)
    {
        $values['developer_created'] = time();
        $values['developer_updated'] = 0;
        $values['developer_project_id'] = !empty($values['developer_project_id']) ? intval($values['developer_project_id']) : 'NULL';
        return sprintf("INSERT INTO %sdeveloper(developer_created, developer_updated, developer_role, developer_status, developer_tasks, developer_project_id, developer_userid) VALUES(%d, %d, %d, %d, %s, %s, %s)", $this->_db->getResourcePrefix(), $values['developer_created'], $values['developer_updated'], $values['developer_role'], $values['developer_status'], $this->_db->escapeString($values['developer_tasks']), $values['developer_project_id'], $this->_db->escapeString($values['developer_userid']));
    }

    protected function _getUpdateQuery($id, array $values)
    {
        $values['developer_project_id'] = !empty($values['developer_project_id']) ? intval($values['developer_project_id']) : 'NULL';
        $last_update = $values['developer_updated'];
        $values['developer_updated'] = time();
        return sprintf("UPDATE %sdeveloper SET developer_updated = %d, developer_role = %d, developer_status = %d, developer_tasks = %s, developer_project_id = %s, developer_userid = %s WHERE developer_id = %d AND developer_updated = %d", $this->_db->getResourcePrefix(), $values['developer_updated'], $values['developer_role'], $values['developer_status'], $this->_db->escapeString($values['developer_tasks']), $values['developer_project_id'], $this->_db->escapeString($values['developer_userid']), $id, $last_update);
    }

    protected function _getDeleteQuery($id)
    {
        return sprintf('DELETE FROM %1$sdeveloper WHERE developer_id = %2$d', $this->_db->getResourcePrefix(), $id);
    }

    protected function _getUpdateByCriteriaQuery($criteriaStr, array $sets)
    {
        $sets['developer_updated'] = 'developer_updated=' . time();
        return sprintf('UPDATE %sdeveloper SET %s WHERE %s', $this->_db->getResourcePrefix(), implode(',', $sets), $criteriaStr);
    }

    protected function _getDeleteByCriteriaQuery($criteriaStr)
    {
        return sprintf('DELETE FROM %1$sdeveloper WHERE %2$s', $this->_db->getResourcePrefix(), $criteriaStr);
    }

    protected function _getCountByCriteriaQuery($criteriaStr)
    {
        return sprintf('SELECT COUNT(*) FROM %1$sdeveloper WHERE %2$s', $this->_db->getResourcePrefix(), $criteriaStr);
    }

    protected function _afterInsertTrigger1($id, array $new)
    {
        if (!empty($new['developer_project_id'])) {
            $this->_db->exec(sprintf('UPDATE %sproject SET project_developer_count = project_developer_count + 1, project_developer_last = %d, project_developer_lasttime = %d WHERE project_id = %d', $this->_db->getResourcePrefix(), $id, $new['developer_created'], $new['developer_project_id']));
        }
    }

    protected function _afterDeleteTrigger1($id, array $old)
    {
        if (!empty($old['developer_project_id'])) {
            $sql = sprintf('SELECT developer_id, developer_created FROM %sdeveloper WHERE developer_project_id = %d ORDER BY developer_created DESC', $this->_db->getResourcePrefix(), $old['developer_project_id']);
            if (($rs = $this->_db->query($sql, 1, 0)) && ($rs->rowCount() > 0)) {
                $row = $rs->fetchAssoc();
                $this->_db->exec(sprintf('UPDATE %sproject SET project_developer_count = project_developer_count - 1, project_developer_last = %d, project_developer_lasttime = %d WHERE project_id = %d', $this->_db->getResourcePrefix(), $row['developer_id'], $row['developer_created'], $old['developer_project_id']));
            } else {
                $this->_db->exec(sprintf('UPDATE %sproject SET project_developer_count = project_developer_count - 1, project_developer_last = 0, project_developer_lasttime = project_created WHERE project_id = %d', $this->_db->getResourcePrefix(), $old['developer_project_id']));
            }
        }
    }

    protected function _afterUpdateTrigger1($id, array $new, array $old)
    {
        if (empty($old['developer_project_id']) && !empty($new['developer_project_id'])) {
            $this->_db->exec(sprintf('UPDATE %sproject SET project_developer_count = project_developer_count + 1, project_developer_last = %d, project_developer_lasttime = %d WHERE project_id = %d', $this->_db->getResourcePrefix(), $id, $new['developer_created'], $new['developer_project_id']));
        } elseif (!empty($old['developer_project_id']) && empty($new['developer_project_id'])) {
            $sql = sprintf('SELECT developer_id, developer_created FROM %sdeveloper WHERE developer_project_id = %d ORDER BY developer_created DESC', $this->_db->getResourcePrefix(), $old['developer_project_id']);
            if (($rs = $this->_db->query($sql, 1, 0)) && ($rs->rowCount() > 0)) {
                $row = $rs->fetchAssoc();
                $this->_db->exec(sprintf('UPDATE %sproject SET project_developer_count = project_developer_count - 1, project_developer_last = %d, project_developer_lasttime = %d WHERE project_id = %d', $this->_db->getResourcePrefix(), $row['developer_id'], $row['developer_created'], $old['developer_project_id']));
            } else {
                $this->_db->exec(sprintf('UPDATE %sproject SET project_developer_count = project_developer_count - 1, project_developer_last = 0, project_developer_lasttime = project_created WHERE project_id = %d', $this->_db->getResourcePrefix(), $old['developer_project_id']));
            }
        } elseif ($old['developer_project_id'] != $new['developer_project_id']) {
            $sql = sprintf('SELECT developer_id, developer_created FROM %sdeveloper WHERE developer_project_id = %d ORDER BY developer_created DESC', $this->_db->getResourcePrefix(), $old['developer_project_id']);
            if (($rs = $this->_db->query($sql, 1, 0)) && ($rs->rowCount() > 0)) {
                $row = $rs->fetchAssoc();
                $this->_db->exec(sprintf('UPDATE %sproject SET project_developer_count = project_developer_count - 1, project_developer_last = %d, project_developer_lasttime = %d WHERE project_id = %d', $this->_db->getResourcePrefix(), $row['developer_id'], $row['developer_created'], $old['developer_project_id']));
            } else {
                $this->_db->exec(sprintf('UPDATE %sproject SET project_developer_count = project_developer_count - 1, project_developer_last = 0, project_developer_lasttime = project_created WHERE project_id = %d', $this->_db->getResourcePrefix(), $old['developer_project_id']));
            }
            $this->_db->exec(sprintf('UPDATE %sproject SET project_developer_count = project_developer_count + 1, project_developer_last = %d, project_developer_lasttime = %d WHERE project_id = %d', $this->_db->getResourcePrefix(), $id, $new['developer_created'], $new['developer_project_id']));
        }
    }

    protected function _afterInsertTrigger($id, array $new)
    {
        $this->_afterInsertTrigger1($id, $new);
    }

    protected function _afterUpdateTrigger($id, array $new, array $old)
    {
        $this->_afterUpdateTrigger1($id, $new, $old);
    }

    protected function _afterDeleteTrigger($id, array $old)
    {
        $this->_afterDeleteTrigger1($id, $old);
    }
}