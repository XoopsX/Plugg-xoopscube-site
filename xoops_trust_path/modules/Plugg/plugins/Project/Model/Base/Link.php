<?php
/*
This file has been generated by the Sabai scaffold script. Do not edit this file directly.
If you need to customize the class, use the following file:
plugins/Project/Model/Link.php
*/
abstract class Plugg_Project_Model_Base_Link extends Sabai_Model_Entity
{
    public function __construct(Sabai_Model $model)
    {
        parent::__construct('Link', $model);
        $this->_vars = array('link_id' => 0, 'link_created' => 0, 'link_updated' => 0, 'link_type' => null, 'link_url' => null, 'link_title' => null, 'link_summary' => null, 'link_summary_html' => null, 'link_summary_filter_id' => 0, 'link_allow_edit' => 1, 'link_score' => 0, 'link_ip' => null, 'link_status' => 0, 'link_project_id' => null, 'link_userid' => null, 'link_linkvote_count' => 0, 'link_linkvote_last' => 0, 'link_linkvote_lasttime' => 0);
    }

    public function getUserId()
    {
        return $this->getVar('userid');
    }

    public function assignUser($user)
    {
        $this->_setVar('userid', $user->getId());
    }

    protected function _fetchUser($withData = false)
    {
        if (!isset($this->_objects['User'])) {
            $user_id = $this->getUserId();
            $identities = $this->_model->fetchUserIdentities(array($user_id), $withData);
            $this->_objects['User'] = $identities[$user_id];
        }
        return $this->_objects['User'];
    }

    public function isOwnedBy($user)
    {
        return $this->getUserId() == $user->getId();
    }

    public function getId()
    {
        return $this->getVar('id');
    }

    public function setId($value)
    {
        $this->setVar('id', $value);
    }

    public function getTimeCreated()
    {
        return $this->getVar('created');
    }

    public function getTimeUpdated()
    {
        return $this->getVar('updated');
    }

    public function getLabel()
    {
        return $this->getVar('title');
    }

    public function getLinkvoteCount()
    {
        return $this->getVar('linkvote_count');
    }

    public function hasLastLinkvote()
    {
        $last_id = $this->getVar('linkvote_last');
        return !empty($last_id);
    }

    public function assignProject(Sabai_Model_Entity $entity)
    {
        if ($entity->getName() != 'Project') return false;

        return $this->_assignEntity($entity, 'project_id');
    }

    public function unassignProject()
    {
        return $this->_unassignEntity('Project', 'project_id');
    }

    protected function _fetchProject()
    {
        return $this->_fetchEntity('Project', 'project_id');
    }

    public function addLinkvote(Sabai_Model_Entity $entity)
    {
        if ($entity->getName() != 'Linkvote') return false;

        return $this->_addEntity($entity);
    }

    public function removeLinkvote(Sabai_Model_Entity $entity)
    {
        if ($entity->getName() != 'Linkvote') return;

        return $this->removeLinkvoteById($entity->getId());
    }

    public function removeLinkvoteById($id)
    {
        return $this->_removeEntityById('linkvote_id', 'Linkvote', $id);
    }

    public function createLinkvote()
    {
        return $this->_createEntity('Linkvote');
    }

    protected function _fetchLinkvotes($limit = 0, $offset = 0, $sort = null, $order = null)
    {
        return $this->_fetchEntities('Linkvote', $limit, $offset, $sort, $order);
    }

    protected function _fetchLastLinkvote()
    {
        if (!isset($this->_objects['LastLinkvote']) && $this->hasLastLinkvote()) {
            $this->_objects['LastLinkvote'] = $this->_fetchEntities('Linkvote', 1, 0, 'linkvote_created', 'DESC')->getNext();
        }
        return $this->_objects['LastLinkvote'];
    }

    public function paginateLinkvotes($perpage = 10, $sort = null, $order = null)
    {
        return $this->_paginateEntities('Linkvote', $perpage, $sort, $order);
    }

    public function removeLinkvotes()
    {
        return $this->_removeEntities('Linkvote');
    }

    public function countLinkvotes()
    {
        return $this->_countEntities('Linkvote');
    }

    protected function _getVar($name)
    {
        return $this->_vars['link_' . $name];
    }

    protected function _setVar($name, $value)
    {
        switch ($name) {
        case 'id':
            $this->_vars['link_id'] = $value;
            break;
        case 'type':
            $this->_vars['link_type'] = trim($value);
            break;
        case 'url':
            $this->_vars['link_url'] = trim($value);
            break;
        case 'title':
            $this->_vars['link_title'] = trim($value);
            break;
        case 'summary':
            $this->_vars['link_summary'] = trim($value);
            break;
        case 'summary_html':
            $this->_vars['link_summary_html'] = trim($value);
            break;
        case 'summary_filter_id':
            $this->_vars['link_summary_filter_id'] = $value;
            break;
        case 'allow_edit':
            $this->_vars['link_allow_edit'] = $value;
            break;
        case 'score':
            $this->_vars['link_score'] = $value;
            break;
        case 'ip':
            $this->_vars['link_ip'] = trim($value);
            break;
        case 'status':
            $this->_vars['link_status'] = $value;
            break;
        case 'project_id':
            $this->_vars['link_project_id'] = $value;
            break;
        case 'userid':
            $this->_vars['link_userid'] = trim($value);
            break;
        case 'linkvote_count':
            $this->_vars['link_linkvote_count'] = $value;
            break;
        case 'linkvote_last':
            $this->_vars['link_linkvote_last'] = $value;
            break;
        case 'linkvote_lasttime':
            $this->_vars['link_linkvote_lasttime'] = $value;
            break;
        default:
            trigger_error(sprintf('Error trying to set value for variable %s. This variable is either read-only or does not exist for this entity', $name), E_USER_WARNING);
            return false;
        }
        return true;
    }

    protected function _get($name, $sort, $order)
    {
        switch ($name) {
        case 'type':
            return $this->getVar('type');
        case 'url':
            return $this->getVar('url');
        case 'title':
            return $this->getVar('title');
        case 'summary':
            return $this->getVar('summary');
        case 'summary_html':
            return $this->getVar('summary_html');
        case 'summary_filter_id':
            return $this->getVar('summary_filter_id');
        case 'allow_edit':
            return $this->getVar('allow_edit');
        case 'score':
            return $this->getVar('score');
        case 'ip':
            return $this->getVar('ip');
        case 'status':
            return $this->getVar('status');
        case 'Project':
            return $this->_fetchProject();
        case 'Linkvotes':
            return $this->_fetchLinkvotes(0, 0, $sort, $order);
        case 'LastLinkvote':
            return $this->_fetchLastLinkvote();
        case 'User':
            return $this->_fetchUser();
        case 'UserWithData':
            return $this->_fetchUser(true);
        }
    }

    public function __set($name, $value)
    {
        switch ($name) {
        case 'type':
            $this->setVar('type', $value);
            break;
        case 'url':
            $this->setVar('url', $value);
            break;
        case 'title':
            $this->setVar('title', $value);
            break;
        case 'summary':
            $this->setVar('summary', $value);
            break;
        case 'summary_html':
            $this->setVar('summary_html', $value);
            break;
        case 'summary_filter_id':
            $this->setVar('summary_filter_id', $value);
            break;
        case 'allow_edit':
            $this->setVar('allow_edit', $value);
            break;
        case 'score':
            $this->setVar('score', $value);
            break;
        case 'ip':
            $this->setVar('ip', $value);
            break;
        case 'status':
            $this->setVar('status', $value);
            break;
        case 'Project':
            $entity = is_array($value) ? $value[0] : $value;
            $this->assignProject($entity);
            break;
        case 'Linkvotes':
            $this->removeLinkvotes();
            foreach (array_keys($value) as $i) {
                $this->addLinkvote($value[$i]);
            }
            break;
        }
    }

    public function initVar($name, $value)
    {
        switch ($name) {
        default:
            $this->_vars[$name] = $value;
            break;
        }
    }
}

abstract class Plugg_Project_Model_Base_LinkRepository extends Sabai_Model_EntityRepository
{
    public function __construct(Sabai_Model $model)
    {
        parent::__construct('Link', $model);
    }
    public function fetchByUser($id, $limit = 0, $offset = 0, $sort = null, $order = null)
    {
        return $this->_fetchByForeign('link_userid', $id, $limit, $offset, $sort, $order);
    }

    public function paginateByUser($id, $perpage = 10, $sort = null, $order = null)
    {
        return $this->_paginateByEntity('User', $id, $perpage, $sort, $order);
    }

    public function countByUser($id)
    {
        return $this->_countByForeign('link_userid', $id);
    }

    public function fetchByUserAndCriteria($id, Sabai_Model_Criteria $criteria, $limit = 0, $offset = 0, $sort = null, $order = null)
    {
        return $this->_fetchByForeignAndCriteria('link_userid', $id, $criteria, $limit, $offset, $sort, $order);
    }

    public function paginateByUserAndCriteria($id, Sabai_Model_Criteria $criteria, $perpage = 10, $sort = null, $order = null)
    {
        return $this->_paginateByEntityAndCriteria('User', $id, $criteria, $perpage, $sort, $order);
    }

    public function countByUserAndCriteria($id, Sabai_Model_Criteria $criteria)
    {
        return $this->_countByForeignAndCriteria('link_userid', $id, $criteria);
    }

    public function fetchByProject($id, $limit = 0, $offset = 0, $sort = null, $order = null)
    {
        return $this->_fetchByForeign('link_project_id', $id, $limit, $offset, $sort, $order);
    }

    public function paginateByProject($id, $perpage = 10, $sort = null, $order = null)
    {
        return $this->_paginateByEntity('Project', $id, $perpage, $sort, $order);
    }

    public function countByProject($id)
    {
        return $this->_countByForeign('link_project_id', $id);
    }

    public function fetchByProjectAndCriteria($id, Sabai_Model_Criteria $criteria, $limit = 0, $offset = 0, $sort = null, $order = null)
    {
        return $this->_fetchByForeignAndCriteria('link_project_id', $id, $criteria, $limit, $offset, $sort, $order);
    }

    public function paginateByProjectAndCriteria($id, Sabai_Model_Criteria $criteria, $perpage = 10, $sort = null, $order = null)
    {
        return $this->_paginateByEntityAndCriteria('Project', $id, $criteria, $perpage, $sort, $order);
    }

    public function countByProjectAndCriteria($id, Sabai_Model_Criteria $criteria)
    {
        return $this->_countByForeignAndCriteria('link_project_id', $id, $criteria);
    }

    protected function _getCollectionByRowset(Sabai_DB_Rowset $rs)
    {
        return new Plugg_Project_Model_Base_LinksByRowset($rs, $this->_model->create('Link'), $this->_model);
    }

    public function createCollection(array $entities = array())
    {
        return new Plugg_Project_Model_Base_Links($this->_model, $entities);
    }
}

class Plugg_Project_Model_Base_LinksByRowset extends Sabai_Model_EntityCollection_Rowset
{
    public function __construct(Sabai_DB_Rowset $rs, Sabai_Model_Entity $emptyEntity, Sabai_Model $model)
    {
        parent::__construct('Links', $rs, $emptyEntity, $model);
    }

    protected function _loadRow(Sabai_Model_Entity $entity, array $row)
    {
        $entity->initVars($row);
    }
}

class Plugg_Project_Model_Base_Links extends Sabai_Model_EntityCollection_Array
{
    public function __construct(Sabai_Model $model, array $entities = array())
    {
        parent::__construct($model, 'Links', $entities);
    }
}