<?php
/*
This file has been generated by the Sabai scaffold script. Do not edit this file directly.
If you need to customize the class, use the following file:
pluginsy/Project/Model/LinkGateway.php
*/
abstract class Plugg_Project_Model_Base_LinkGateway extends Sabai_Model_Gateway
{
    public function getName()
    {
        return 'link';
    }

    public function getFields()
    {
        return array('link_id' => Sabai_Model::KEY_TYPE_INT, 'link_created' => Sabai_Model::KEY_TYPE_INT, 'link_updated' => Sabai_Model::KEY_TYPE_INT, 'link_type' => Sabai_Model::KEY_TYPE_VARCHAR, 'link_url' => Sabai_Model::KEY_TYPE_VARCHAR, 'link_title' => Sabai_Model::KEY_TYPE_VARCHAR, 'link_summary' => Sabai_Model::KEY_TYPE_TEXT, 'link_summary_html' => Sabai_Model::KEY_TYPE_TEXT, 'link_summary_filter_id' => Sabai_Model::KEY_TYPE_INT, 'link_allow_edit' => Sabai_Model::KEY_TYPE_INT, 'link_score' => Sabai_Model::KEY_TYPE_INT, 'link_ip' => Sabai_Model::KEY_TYPE_CHAR, 'link_status' => Sabai_Model::KEY_TYPE_INT, 'link_project_id' => Sabai_Model::KEY_TYPE_INT_NULL, 'link_userid' => Sabai_Model::KEY_TYPE_VARCHAR, 'link_linkvote_count' => Sabai_Model::KEY_TYPE_INT, 'link_linkvote_last' => Sabai_Model::KEY_TYPE_INT, 'link_linkvote_lasttime' => Sabai_Model::KEY_TYPE_INT);
    }

    protected function _getSelectByIdQuery($id, array $fields)
    {
        $fields = empty($fields) ? '*' : implode(', ', $fields);
        return sprintf('SELECT %s FROM %slink WHERE link_id = %d', $fields, $this->_db->getResourcePrefix(), $id);
    }

    protected function _getSelectByCriteriaQuery($criteriaStr, array $fields)
    {
        $fields = empty($fields) ? '*' : implode(', ', $fields);
        return sprintf('SELECT %1$s FROM %2$slink WHERE %3$s', $fields, $this->_db->getResourcePrefix(), $criteriaStr);
    }

    protected function _getInsertQuery(array $values)
    {
        $values['link_created'] = time();
        $values['link_updated'] = 0;
        $values['link_linkvote_lasttime'] = $values['link_created'];
        $values['link_project_id'] = !empty($values['link_project_id']) ? intval($values['link_project_id']) : 'NULL';
        return sprintf("INSERT INTO %slink(link_created, link_updated, link_type, link_url, link_title, link_summary, link_summary_html, link_summary_filter_id, link_allow_edit, link_score, link_ip, link_status, link_project_id, link_userid, link_linkvote_count, link_linkvote_last, link_linkvote_lasttime) VALUES(%d, %d, %s, %s, %s, %s, %s, %d, %d, %d, %s, %d, %s, %s, %d, %d, %d)", $this->_db->getResourcePrefix(), $values['link_created'], $values['link_updated'], $this->_db->escapeString($values['link_type']), $this->_db->escapeString($values['link_url']), $this->_db->escapeString($values['link_title']), $this->_db->escapeString($values['link_summary']), $this->_db->escapeString($values['link_summary_html']), $values['link_summary_filter_id'], $values['link_allow_edit'], $values['link_score'], $this->_db->escapeString($values['link_ip']), $values['link_status'], $values['link_project_id'], $this->_db->escapeString($values['link_userid']), $values['link_linkvote_count'], $values['link_linkvote_last'], $values['link_linkvote_lasttime']);
    }

    protected function _getUpdateQuery($id, array $values)
    {
        $values['link_project_id'] = !empty($values['link_project_id']) ? intval($values['link_project_id']) : 'NULL';
        $last_update = $values['link_updated'];
        $values['link_updated'] = time();
        return sprintf("UPDATE %slink SET link_updated = %d, link_type = %s, link_url = %s, link_title = %s, link_summary = %s, link_summary_html = %s, link_summary_filter_id = %d, link_allow_edit = %d, link_score = %d, link_ip = %s, link_status = %d, link_project_id = %s, link_userid = %s, link_linkvote_count = %d, link_linkvote_last = %d, link_linkvote_lasttime = %d WHERE link_id = %d AND link_updated = %d", $this->_db->getResourcePrefix(), $values['link_updated'], $this->_db->escapeString($values['link_type']), $this->_db->escapeString($values['link_url']), $this->_db->escapeString($values['link_title']), $this->_db->escapeString($values['link_summary']), $this->_db->escapeString($values['link_summary_html']), $values['link_summary_filter_id'], $values['link_allow_edit'], $values['link_score'], $this->_db->escapeString($values['link_ip']), $values['link_status'], $values['link_project_id'], $this->_db->escapeString($values['link_userid']), $values['link_linkvote_count'], $values['link_linkvote_last'], $values['link_linkvote_lasttime'], $id, $last_update);
    }

    protected function _getDeleteQuery($id)
    {
        return sprintf('DELETE FROM %1$slink WHERE link_id = %2$d', $this->_db->getResourcePrefix(), $id);
    }

    protected function _getUpdateByCriteriaQuery($criteriaStr, array $sets)
    {
        $sets['link_updated'] = 'link_updated=' . time();
        return sprintf('UPDATE %slink SET %s WHERE %s', $this->_db->getResourcePrefix(), implode(',', $sets), $criteriaStr);
    }

    protected function _getDeleteByCriteriaQuery($criteriaStr)
    {
        return sprintf('DELETE FROM %1$slink WHERE %2$s', $this->_db->getResourcePrefix(), $criteriaStr);
    }

    protected function _getCountByCriteriaQuery($criteriaStr)
    {
        return sprintf('SELECT COUNT(*) FROM %1$slink WHERE %2$s', $this->_db->getResourcePrefix(), $criteriaStr);
    }

    protected function _afterInsertTrigger1($id, array $new)
    {
        if (!empty($new['link_project_id'])) {
            $this->_db->exec(sprintf('UPDATE %sproject SET project_link_count = project_link_count + 1, project_link_last = %d, project_link_lasttime = %d WHERE project_id = %d', $this->_db->getResourcePrefix(), $id, $new['link_created'], $new['link_project_id']));
        }
    }

    protected function _afterDeleteTrigger1($id, array $old)
    {
        if (!empty($old['link_project_id'])) {
            $sql = sprintf('SELECT link_id, link_created FROM %slink WHERE link_project_id = %d ORDER BY link_created DESC', $this->_db->getResourcePrefix(), $old['link_project_id']);
            if (($rs = $this->_db->query($sql, 1, 0)) && ($rs->rowCount() > 0)) {
                $row = $rs->fetchAssoc();
                $this->_db->exec(sprintf('UPDATE %sproject SET project_link_count = project_link_count - 1, project_link_last = %d, project_link_lasttime = %d WHERE project_id = %d', $this->_db->getResourcePrefix(), $row['link_id'], $row['link_created'], $old['link_project_id']));
            } else {
                $this->_db->exec(sprintf('UPDATE %sproject SET project_link_count = project_link_count - 1, project_link_last = 0, project_link_lasttime = project_created WHERE project_id = %d', $this->_db->getResourcePrefix(), $old['link_project_id']));
            }
        }
    }

    protected function _afterUpdateTrigger1($id, array $new, array $old)
    {
        if (empty($old['link_project_id']) && !empty($new['link_project_id'])) {
            $this->_db->exec(sprintf('UPDATE %sproject SET project_link_count = project_link_count + 1, project_link_last = %d, project_link_lasttime = %d WHERE project_id = %d', $this->_db->getResourcePrefix(), $id, $new['link_created'], $new['link_project_id']));
        } elseif (!empty($old['link_project_id']) && empty($new['link_project_id'])) {
            $sql = sprintf('SELECT link_id, link_created FROM %slink WHERE link_project_id = %d ORDER BY link_created DESC', $this->_db->getResourcePrefix(), $old['link_project_id']);
            if (($rs = $this->_db->query($sql, 1, 0)) && ($rs->rowCount() > 0)) {
                $row = $rs->fetchAssoc();
                $this->_db->exec(sprintf('UPDATE %sproject SET project_link_count = project_link_count - 1, project_link_last = %d, project_link_lasttime = %d WHERE project_id = %d', $this->_db->getResourcePrefix(), $row['link_id'], $row['link_created'], $old['link_project_id']));
            } else {
                $this->_db->exec(sprintf('UPDATE %sproject SET project_link_count = project_link_count - 1, project_link_last = 0, project_link_lasttime = project_created WHERE project_id = %d', $this->_db->getResourcePrefix(), $old['link_project_id']));
            }
        } elseif ($old['link_project_id'] != $new['link_project_id']) {
            $sql = sprintf('SELECT link_id, link_created FROM %slink WHERE link_project_id = %d ORDER BY link_created DESC', $this->_db->getResourcePrefix(), $old['link_project_id']);
            if (($rs = $this->_db->query($sql, 1, 0)) && ($rs->rowCount() > 0)) {
                $row = $rs->fetchAssoc();
                $this->_db->exec(sprintf('UPDATE %sproject SET project_link_count = project_link_count - 1, project_link_last = %d, project_link_lasttime = %d WHERE project_id = %d', $this->_db->getResourcePrefix(), $row['link_id'], $row['link_created'], $old['link_project_id']));
            } else {
                $this->_db->exec(sprintf('UPDATE %sproject SET project_link_count = project_link_count - 1, project_link_last = 0, project_link_lasttime = project_created WHERE project_id = %d', $this->_db->getResourcePrefix(), $old['link_project_id']));
            }
            $this->_db->exec(sprintf('UPDATE %sproject SET project_link_count = project_link_count + 1, project_link_last = %d, project_link_lasttime = %d WHERE project_id = %d', $this->_db->getResourcePrefix(), $id, $new['link_created'], $new['link_project_id']));
        }
    }

    protected function _beforeDeleteTrigger1($id, array $old)
    {
        return $this->_db->exec(sprintf('DELETE FROM %1$slinkvote WHERE %1$slinkvote.linkvote_link_id = %2$d', $this->_db->getResourcePrefix(), $id), false);
    }

    protected function _afterInsertTrigger($id, array $new)
    {
        $this->_afterInsertTrigger1($id, $new);
    }

    protected function _afterUpdateTrigger($id, array $new, array $old)
    {
        $this->_afterUpdateTrigger1($id, $new, $old);
    }

    protected function _beforeDeleteTrigger($id, array $old)
    {
        if (!$this->_beforeDeleteTrigger1($id, $old)) return false;
        return true;
    }

    protected function _afterDeleteTrigger($id, array $old)
    {
        $this->_afterDeleteTrigger1($id, $old);
    }
}