<?php
/*
This file has been generated by the Sabai scaffold script. Do not edit this file directly.
If you need to customize the class, use the following file:
pluginsy/Project/Model/LinkvoteGateway.php
*/
abstract class Plugg_Project_Model_Base_LinkvoteGateway extends Sabai_Model_Gateway
{
    public function getName()
    {
        return 'linkvote';
    }

    public function getFields()
    {
        return array('linkvote_id' => Sabai_Model::KEY_TYPE_INT, 'linkvote_created' => Sabai_Model::KEY_TYPE_INT, 'linkvote_updated' => Sabai_Model::KEY_TYPE_INT, 'linkvote_rating' => Sabai_Model::KEY_TYPE_INT, 'linkvote_ip' => Sabai_Model::KEY_TYPE_CHAR, 'linkvote_link_id' => Sabai_Model::KEY_TYPE_INT_NULL, 'linkvote_userid' => Sabai_Model::KEY_TYPE_VARCHAR);
    }

    protected function _getSelectByIdQuery($id, array $fields)
    {
        $fields = empty($fields) ? '*' : implode(', ', $fields);
        return sprintf('SELECT %s FROM %slinkvote WHERE linkvote_id = %d', $fields, $this->_db->getResourcePrefix(), $id);
    }

    protected function _getSelectByCriteriaQuery($criteriaStr, array $fields)
    {
        $fields = empty($fields) ? '*' : implode(', ', $fields);
        return sprintf('SELECT %1$s FROM %2$slinkvote WHERE %3$s', $fields, $this->_db->getResourcePrefix(), $criteriaStr);
    }

    protected function _getInsertQuery(array $values)
    {
        $values['linkvote_created'] = time();
        $values['linkvote_updated'] = 0;
        $values['linkvote_link_id'] = !empty($values['linkvote_link_id']) ? intval($values['linkvote_link_id']) : 'NULL';
        return sprintf("INSERT INTO %slinkvote(linkvote_created, linkvote_updated, linkvote_rating, linkvote_ip, linkvote_link_id, linkvote_userid) VALUES(%d, %d, %d, %s, %s, %s)", $this->_db->getResourcePrefix(), $values['linkvote_created'], $values['linkvote_updated'], $values['linkvote_rating'], $this->_db->escapeString($values['linkvote_ip']), $values['linkvote_link_id'], $this->_db->escapeString($values['linkvote_userid']));
    }

    protected function _getUpdateQuery($id, array $values)
    {
        $values['linkvote_link_id'] = !empty($values['linkvote_link_id']) ? intval($values['linkvote_link_id']) : 'NULL';
        $last_update = $values['linkvote_updated'];
        $values['linkvote_updated'] = time();
        return sprintf("UPDATE %slinkvote SET linkvote_updated = %d, linkvote_rating = %d, linkvote_ip = %s, linkvote_link_id = %s, linkvote_userid = %s WHERE linkvote_id = %d AND linkvote_updated = %d", $this->_db->getResourcePrefix(), $values['linkvote_updated'], $values['linkvote_rating'], $this->_db->escapeString($values['linkvote_ip']), $values['linkvote_link_id'], $this->_db->escapeString($values['linkvote_userid']), $id, $last_update);
    }

    protected function _getDeleteQuery($id)
    {
        return sprintf('DELETE FROM %1$slinkvote WHERE linkvote_id = %2$d', $this->_db->getResourcePrefix(), $id);
    }

    protected function _getUpdateByCriteriaQuery($criteriaStr, array $sets)
    {
        $sets['linkvote_updated'] = 'linkvote_updated=' . time();
        return sprintf('UPDATE %slinkvote SET %s WHERE %s', $this->_db->getResourcePrefix(), implode(',', $sets), $criteriaStr);
    }

    protected function _getDeleteByCriteriaQuery($criteriaStr)
    {
        return sprintf('DELETE FROM %1$slinkvote WHERE %2$s', $this->_db->getResourcePrefix(), $criteriaStr);
    }

    protected function _getCountByCriteriaQuery($criteriaStr)
    {
        return sprintf('SELECT COUNT(*) FROM %1$slinkvote WHERE %2$s', $this->_db->getResourcePrefix(), $criteriaStr);
    }

    protected function _afterInsertTrigger1($id, array $new)
    {
        if (!empty($new['linkvote_link_id'])) {
            $this->_db->exec(sprintf('UPDATE %slink SET link_linkvote_count = link_linkvote_count + 1, link_linkvote_last = %d, link_linkvote_lasttime = %d WHERE link_id = %d', $this->_db->getResourcePrefix(), $id, $new['linkvote_created'], $new['linkvote_link_id']));
        }
    }

    protected function _afterDeleteTrigger1($id, array $old)
    {
        if (!empty($old['linkvote_link_id'])) {
            $sql = sprintf('SELECT linkvote_id, linkvote_created FROM %slinkvote WHERE linkvote_link_id = %d ORDER BY linkvote_created DESC', $this->_db->getResourcePrefix(), $old['linkvote_link_id']);
            if (($rs = $this->_db->query($sql, 1, 0)) && ($rs->rowCount() > 0)) {
                $row = $rs->fetchAssoc();
                $this->_db->exec(sprintf('UPDATE %slink SET link_linkvote_count = link_linkvote_count - 1, link_linkvote_last = %d, link_linkvote_lasttime = %d WHERE link_id = %d', $this->_db->getResourcePrefix(), $row['linkvote_id'], $row['linkvote_created'], $old['linkvote_link_id']));
            } else {
                $this->_db->exec(sprintf('UPDATE %slink SET link_linkvote_count = link_linkvote_count - 1, link_linkvote_last = 0, link_linkvote_lasttime = link_created WHERE link_id = %d', $this->_db->getResourcePrefix(), $old['linkvote_link_id']));
            }
        }
    }

    protected function _afterUpdateTrigger1($id, array $new, array $old)
    {
        if (empty($old['linkvote_link_id']) && !empty($new['linkvote_link_id'])) {
            $this->_db->exec(sprintf('UPDATE %slink SET link_linkvote_count = link_linkvote_count + 1, link_linkvote_last = %d, link_linkvote_lasttime = %d WHERE link_id = %d', $this->_db->getResourcePrefix(), $id, $new['linkvote_created'], $new['linkvote_link_id']));
        } elseif (!empty($old['linkvote_link_id']) && empty($new['linkvote_link_id'])) {
            $sql = sprintf('SELECT linkvote_id, linkvote_created FROM %slinkvote WHERE linkvote_link_id = %d ORDER BY linkvote_created DESC', $this->_db->getResourcePrefix(), $old['linkvote_link_id']);
            if (($rs = $this->_db->query($sql, 1, 0)) && ($rs->rowCount() > 0)) {
                $row = $rs->fetchAssoc();
                $this->_db->exec(sprintf('UPDATE %slink SET link_linkvote_count = link_linkvote_count - 1, link_linkvote_last = %d, link_linkvote_lasttime = %d WHERE link_id = %d', $this->_db->getResourcePrefix(), $row['linkvote_id'], $row['linkvote_created'], $old['linkvote_link_id']));
            } else {
                $this->_db->exec(sprintf('UPDATE %slink SET link_linkvote_count = link_linkvote_count - 1, link_linkvote_last = 0, link_linkvote_lasttime = link_created WHERE link_id = %d', $this->_db->getResourcePrefix(), $old['linkvote_link_id']));
            }
        } elseif ($old['linkvote_link_id'] != $new['linkvote_link_id']) {
            $sql = sprintf('SELECT linkvote_id, linkvote_created FROM %slinkvote WHERE linkvote_link_id = %d ORDER BY linkvote_created DESC', $this->_db->getResourcePrefix(), $old['linkvote_link_id']);
            if (($rs = $this->_db->query($sql, 1, 0)) && ($rs->rowCount() > 0)) {
                $row = $rs->fetchAssoc();
                $this->_db->exec(sprintf('UPDATE %slink SET link_linkvote_count = link_linkvote_count - 1, link_linkvote_last = %d, link_linkvote_lasttime = %d WHERE link_id = %d', $this->_db->getResourcePrefix(), $row['linkvote_id'], $row['linkvote_created'], $old['linkvote_link_id']));
            } else {
                $this->_db->exec(sprintf('UPDATE %slink SET link_linkvote_count = link_linkvote_count - 1, link_linkvote_last = 0, link_linkvote_lasttime = link_created WHERE link_id = %d', $this->_db->getResourcePrefix(), $old['linkvote_link_id']));
            }
            $this->_db->exec(sprintf('UPDATE %slink SET link_linkvote_count = link_linkvote_count + 1, link_linkvote_last = %d, link_linkvote_lasttime = %d WHERE link_id = %d', $this->_db->getResourcePrefix(), $id, $new['linkvote_created'], $new['linkvote_link_id']));
        }
    }

    protected function _afterInsertTrigger($id, array $new)
    {
        $this->_afterInsertTrigger1($id, $new);
    }

    protected function _afterUpdateTrigger($id, array $new, array $old)
    {
        $this->_afterUpdateTrigger1($id, $new, $old);
    }

    protected function _afterDeleteTrigger($id, array $old)
    {
        $this->_afterDeleteTrigger1($id, $old);
    }
}