<?php
/*
This file has been generated by the Sabai scaffold script. Do not edit this file directly.
If you need to customize the class, use the following file:
plugins/Project/Model/Project.php
*/
abstract class Plugg_Project_Model_Base_Project extends Sabai_Model_Entity
{
    public function __construct(Sabai_Model $model)
    {
        parent::__construct('Project', $model);
        $this->_vars = array('project_id' => 0, 'project_created' => 0, 'project_updated' => 0, 'project_name' => null, 'project_summary' => null, 'project_summary_html' => null, 'project_summary_filter_id' => 0, 'project_data' => null, 'project_release_latest' => 0, 'project_lastupdate' => 0, 'project_image_featured' => 0, 'project_status' => 0, 'project_hidden' => 0, 'project_allow_comments' => 1, 'project_allow_links' => 1, 'project_allow_images' => 1, 'project_allow_releases' => 1, 'project_comment_rating' => 0, 'project_views' => 0, 'project_userid' => null, 'project_link_count' => 0, 'project_link_last' => 0, 'project_link_lasttime' => 0, 'project_release_count' => 0, 'project_release_last' => 0, 'project_release_lasttime' => 0, 'project_comment_count' => 0, 'project_comment_last' => 0, 'project_comment_lasttime' => 0, 'project_developer_count' => 0, 'project_developer_last' => 0, 'project_developer_lasttime' => 0, 'project_abuse_count' => 0, 'project_abuse_last' => 0, 'project_abuse_lasttime' => 0, 'project_image_count' => 0, 'project_image_last' => 0, 'project_image_lasttime' => 0);
    }

    public function getUserId()
    {
        return $this->getVar('userid');
    }

    public function assignUser($user)
    {
        $this->_setVar('userid', $user->getId());
    }

    protected function _fetchUser($withData = false)
    {
        if (!isset($this->_objects['User'])) {
            $user_id = $this->getUserId();
            $identities = $this->_model->fetchUserIdentities(array($user_id), $withData);
            $this->_objects['User'] = $identities[$user_id];
        }
        return $this->_objects['User'];
    }

    public function isOwnedBy($user)
    {
        return $this->getUserId() == $user->getId();
    }

    public function getId()
    {
        return $this->getVar('id');
    }

    public function setId($value)
    {
        $this->setVar('id', $value);
    }

    public function getTimeCreated()
    {
        return $this->getVar('created');
    }

    public function getTimeUpdated()
    {
        return $this->getVar('updated');
    }

    public function getLabel()
    {
        return $this->getVar('name');
    }

    public function getLinkCount()
    {
        return $this->getVar('link_count');
    }

    public function hasLastLink()
    {
        $last_id = $this->getVar('link_last');
        return !empty($last_id);
    }

    public function getReleaseCount()
    {
        return $this->getVar('release_count');
    }

    public function hasLastRelease()
    {
        $last_id = $this->getVar('release_last');
        return !empty($last_id);
    }

    public function getCommentCount()
    {
        return $this->getVar('comment_count');
    }

    public function hasLastComment()
    {
        $last_id = $this->getVar('comment_last');
        return !empty($last_id);
    }

    public function getDeveloperCount()
    {
        return $this->getVar('developer_count');
    }

    public function hasLastDeveloper()
    {
        $last_id = $this->getVar('developer_last');
        return !empty($last_id);
    }

    public function getAbuseCount()
    {
        return $this->getVar('abuse_count');
    }

    public function hasLastAbuse()
    {
        $last_id = $this->getVar('abuse_last');
        return !empty($last_id);
    }

    public function getImageCount()
    {
        return $this->getVar('image_count');
    }

    public function hasLastImage()
    {
        $last_id = $this->getVar('image_last');
        return !empty($last_id);
    }

    public function addLink(Sabai_Model_Entity $entity)
    {
        if ($entity->getName() != 'Link') return false;

        return $this->_addEntity($entity);
    }

    public function removeLink(Sabai_Model_Entity $entity)
    {
        if ($entity->getName() != 'Link') return;

        return $this->removeLinkById($entity->getId());
    }

    public function removeLinkById($id)
    {
        return $this->_removeEntityById('link_id', 'Link', $id);
    }

    public function createLink()
    {
        return $this->_createEntity('Link');
    }

    protected function _fetchLinks($limit = 0, $offset = 0, $sort = null, $order = null)
    {
        return $this->_fetchEntities('Link', $limit, $offset, $sort, $order);
    }

    protected function _fetchLastLink()
    {
        if (!isset($this->_objects['LastLink']) && $this->hasLastLink()) {
            $this->_objects['LastLink'] = $this->_fetchEntities('Link', 1, 0, 'link_created', 'DESC')->getNext();
        }
        return $this->_objects['LastLink'];
    }

    public function paginateLinks($perpage = 10, $sort = null, $order = null)
    {
        return $this->_paginateEntities('Link', $perpage, $sort, $order);
    }

    public function removeLinks()
    {
        return $this->_removeEntities('Link');
    }

    public function countLinks()
    {
        return $this->_countEntities('Link');
    }

    public function addRelease(Sabai_Model_Entity $entity)
    {
        if ($entity->getName() != 'Release') return false;

        return $this->_addEntity($entity);
    }

    public function removeRelease(Sabai_Model_Entity $entity)
    {
        if ($entity->getName() != 'Release') return;

        return $this->removeReleaseById($entity->getId());
    }

    public function removeReleaseById($id)
    {
        return $this->_removeEntityById('release_id', 'Release', $id);
    }

    public function createRelease()
    {
        return $this->_createEntity('Release');
    }

    protected function _fetchReleases($limit = 0, $offset = 0, $sort = null, $order = null)
    {
        return $this->_fetchEntities('Release', $limit, $offset, $sort, $order);
    }

    protected function _fetchLastRelease()
    {
        if (!isset($this->_objects['LastRelease']) && $this->hasLastRelease()) {
            $this->_objects['LastRelease'] = $this->_fetchEntities('Release', 1, 0, 'release_created', 'DESC')->getNext();
        }
        return $this->_objects['LastRelease'];
    }

    public function paginateReleases($perpage = 10, $sort = null, $order = null)
    {
        return $this->_paginateEntities('Release', $perpage, $sort, $order);
    }

    public function removeReleases()
    {
        return $this->_removeEntities('Release');
    }

    public function countReleases()
    {
        return $this->_countEntities('Release');
    }

    public function addComment(Sabai_Model_Entity $entity)
    {
        if ($entity->getName() != 'Comment') return false;

        return $this->_addEntity($entity);
    }

    public function removeComment(Sabai_Model_Entity $entity)
    {
        if ($entity->getName() != 'Comment') return;

        return $this->removeCommentById($entity->getId());
    }

    public function removeCommentById($id)
    {
        return $this->_removeEntityById('comment_id', 'Comment', $id);
    }

    public function createComment()
    {
        return $this->_createEntity('Comment');
    }

    protected function _fetchComments($limit = 0, $offset = 0, $sort = null, $order = null)
    {
        return $this->_fetchEntities('Comment', $limit, $offset, $sort, $order);
    }

    protected function _fetchLastComment()
    {
        if (!isset($this->_objects['LastComment']) && $this->hasLastComment()) {
            $this->_objects['LastComment'] = $this->_fetchEntities('Comment', 1, 0, 'comment_created', 'DESC')->getNext();
        }
        return $this->_objects['LastComment'];
    }

    public function paginateComments($perpage = 10, $sort = null, $order = null)
    {
        return $this->_paginateEntities('Comment', $perpage, $sort, $order);
    }

    public function removeComments()
    {
        return $this->_removeEntities('Comment');
    }

    public function countComments()
    {
        return $this->_countEntities('Comment');
    }

    public function addDeveloper(Sabai_Model_Entity $entity)
    {
        if ($entity->getName() != 'Developer') return false;

        return $this->_addEntity($entity);
    }

    public function removeDeveloper(Sabai_Model_Entity $entity)
    {
        if ($entity->getName() != 'Developer') return;

        return $this->removeDeveloperById($entity->getId());
    }

    public function removeDeveloperById($id)
    {
        return $this->_removeEntityById('developer_id', 'Developer', $id);
    }

    public function createDeveloper()
    {
        return $this->_createEntity('Developer');
    }

    protected function _fetchDevelopers($limit = 0, $offset = 0, $sort = null, $order = null)
    {
        return $this->_fetchEntities('Developer', $limit, $offset, $sort, $order);
    }

    protected function _fetchLastDeveloper()
    {
        if (!isset($this->_objects['LastDeveloper']) && $this->hasLastDeveloper()) {
            $this->_objects['LastDeveloper'] = $this->_fetchEntities('Developer', 1, 0, 'developer_created', 'DESC')->getNext();
        }
        return $this->_objects['LastDeveloper'];
    }

    public function paginateDevelopers($perpage = 10, $sort = null, $order = null)
    {
        return $this->_paginateEntities('Developer', $perpage, $sort, $order);
    }

    public function removeDevelopers()
    {
        return $this->_removeEntities('Developer');
    }

    public function countDevelopers()
    {
        return $this->_countEntities('Developer');
    }

    public function addAbuse(Sabai_Model_Entity $entity)
    {
        if ($entity->getName() != 'Abuse') return false;

        return $this->_addEntity($entity);
    }

    public function removeAbuse(Sabai_Model_Entity $entity)
    {
        if ($entity->getName() != 'Abuse') return;

        return $this->removeAbuseById($entity->getId());
    }

    public function removeAbuseById($id)
    {
        return $this->_removeEntityById('abuse_id', 'Abuse', $id);
    }

    public function createAbuse()
    {
        return $this->_createEntity('Abuse');
    }

    protected function _fetchAbuses($limit = 0, $offset = 0, $sort = null, $order = null)
    {
        return $this->_fetchEntities('Abuse', $limit, $offset, $sort, $order);
    }

    protected function _fetchLastAbuse()
    {
        if (!isset($this->_objects['LastAbuse']) && $this->hasLastAbuse()) {
            $this->_objects['LastAbuse'] = $this->_fetchEntities('Abuse', 1, 0, 'abuse_created', 'DESC')->getNext();
        }
        return $this->_objects['LastAbuse'];
    }

    public function paginateAbuses($perpage = 10, $sort = null, $order = null)
    {
        return $this->_paginateEntities('Abuse', $perpage, $sort, $order);
    }

    public function removeAbuses()
    {
        return $this->_removeEntities('Abuse');
    }

    public function countAbuses()
    {
        return $this->_countEntities('Abuse');
    }

    public function addImage(Sabai_Model_Entity $entity)
    {
        if ($entity->getName() != 'Image') return false;

        return $this->_addEntity($entity);
    }

    public function removeImage(Sabai_Model_Entity $entity)
    {
        if ($entity->getName() != 'Image') return;

        return $this->removeImageById($entity->getId());
    }

    public function removeImageById($id)
    {
        return $this->_removeEntityById('image_id', 'Image', $id);
    }

    public function createImage()
    {
        return $this->_createEntity('Image');
    }

    protected function _fetchImages($limit = 0, $offset = 0, $sort = null, $order = null)
    {
        return $this->_fetchEntities('Image', $limit, $offset, $sort, $order);
    }

    protected function _fetchLastImage()
    {
        if (!isset($this->_objects['LastImage']) && $this->hasLastImage()) {
            $this->_objects['LastImage'] = $this->_fetchEntities('Image', 1, 0, 'image_created', 'DESC')->getNext();
        }
        return $this->_objects['LastImage'];
    }

    public function paginateImages($perpage = 10, $sort = null, $order = null)
    {
        return $this->_paginateEntities('Image', $perpage, $sort, $order);
    }

    public function removeImages()
    {
        return $this->_removeEntities('Image');
    }

    public function countImages()
    {
        return $this->_countEntities('Image');
    }

    public function linkCategory(Sabai_Model_Entity $entity)
    {
        if ($entity->getName() == 'Category') return $this->linkCategoryById($entity->getId());

        return false;
    }

    public function linkCategoryById($id)
    {
        return $this->_linkEntityById('Project2category', 'category_id', $id);
    }

    public function unlinkCategory(Sabai_Model_entity $entity)
    {
        if ($entity->getName() != 'Category') return 0;

        return $this->unlinkCategoryById($entity->getId());
    }

    public function unlinkCategoryById($id)
    {
        return $this->_unlinkEntityById('Project2category', 'project2category_project_id', 'project2category_category_id', $id);
    }

    public function unlinkCategories()
    {
        return $this->_unlinkEntities('Project2category');
    }

    protected function _fetchCategories($limit = 0, $offset = 0, $sort = null, $order = null)
    {
        return $this->_fetchEntities('Category', $limit, $offset, $sort, $order);
    }

    public function paginateCategories($perpage = 10, $sort = null, $order = null)
    {
        return $this->_paginateEntities('Category', $perpage, $sort, $order);
    }

    public function countCategories()
    {
        return $this->_countEntities('Category');
    }

    protected function _getVar($name)
    {
        return $this->_vars['project_' . $name];
    }

    protected function _setVar($name, $value)
    {
        switch ($name) {
        case 'id':
            $this->_vars['project_id'] = $value;
            break;
        case 'name':
            $this->_vars['project_name'] = trim($value);
            break;
        case 'summary':
            $this->_vars['project_summary'] = trim($value);
            break;
        case 'summary_html':
            $this->_vars['project_summary_html'] = trim($value);
            break;
        case 'summary_filter_id':
            $this->_vars['project_summary_filter_id'] = $value;
            break;
        case 'data':
            $this->_vars['project_data'] = trim($value);
            break;
        case 'release_latest':
            $this->_vars['project_release_latest'] = $value;
            break;
        case 'lastupdate':
            $this->_vars['project_lastupdate'] = $value;
            break;
        case 'image_featured':
            $this->_vars['project_image_featured'] = $value;
            break;
        case 'status':
            $this->_vars['project_status'] = $value;
            break;
        case 'hidden':
            $this->_vars['project_hidden'] = $value;
            break;
        case 'allow_comments':
            $this->_vars['project_allow_comments'] = $value;
            break;
        case 'allow_links':
            $this->_vars['project_allow_links'] = $value;
            break;
        case 'allow_images':
            $this->_vars['project_allow_images'] = $value;
            break;
        case 'allow_releases':
            $this->_vars['project_allow_releases'] = $value;
            break;
        case 'comment_rating':
            $this->_vars['project_comment_rating'] = $value;
            break;
        case 'views':
            $this->_vars['project_views'] = $value;
            break;
        case 'userid':
            $this->_vars['project_userid'] = trim($value);
            break;
        case 'link_count':
            $this->_vars['project_link_count'] = $value;
            break;
        case 'link_last':
            $this->_vars['project_link_last'] = $value;
            break;
        case 'link_lasttime':
            $this->_vars['project_link_lasttime'] = $value;
            break;
        case 'release_count':
            $this->_vars['project_release_count'] = $value;
            break;
        case 'release_last':
            $this->_vars['project_release_last'] = $value;
            break;
        case 'release_lasttime':
            $this->_vars['project_release_lasttime'] = $value;
            break;
        case 'comment_count':
            $this->_vars['project_comment_count'] = $value;
            break;
        case 'comment_last':
            $this->_vars['project_comment_last'] = $value;
            break;
        case 'comment_lasttime':
            $this->_vars['project_comment_lasttime'] = $value;
            break;
        case 'developer_count':
            $this->_vars['project_developer_count'] = $value;
            break;
        case 'developer_last':
            $this->_vars['project_developer_last'] = $value;
            break;
        case 'developer_lasttime':
            $this->_vars['project_developer_lasttime'] = $value;
            break;
        case 'abuse_count':
            $this->_vars['project_abuse_count'] = $value;
            break;
        case 'abuse_last':
            $this->_vars['project_abuse_last'] = $value;
            break;
        case 'abuse_lasttime':
            $this->_vars['project_abuse_lasttime'] = $value;
            break;
        case 'image_count':
            $this->_vars['project_image_count'] = $value;
            break;
        case 'image_last':
            $this->_vars['project_image_last'] = $value;
            break;
        case 'image_lasttime':
            $this->_vars['project_image_lasttime'] = $value;
            break;
        default:
            trigger_error(sprintf('Error trying to set value for variable %s. This variable is either read-only or does not exist for this entity', $name), E_USER_WARNING);
            return false;
        }
        return true;
    }

    protected function _get($name, $sort, $order)
    {
        switch ($name) {
        case 'name':
            return $this->getVar('name');
        case 'summary':
            return $this->getVar('summary');
        case 'summary_html':
            return $this->getVar('summary_html');
        case 'summary_filter_id':
            return $this->getVar('summary_filter_id');
        case 'data':
            return $this->getVar('data');
        case 'release_latest':
            return $this->getVar('release_latest');
        case 'lastupdate':
            return $this->getVar('lastupdate');
        case 'image_featured':
            return $this->getVar('image_featured');
        case 'status':
            return $this->getVar('status');
        case 'hidden':
            return $this->getVar('hidden');
        case 'allow_comments':
            return $this->getVar('allow_comments');
        case 'allow_links':
            return $this->getVar('allow_links');
        case 'allow_images':
            return $this->getVar('allow_images');
        case 'allow_releases':
            return $this->getVar('allow_releases');
        case 'comment_rating':
            return $this->getVar('comment_rating');
        case 'views':
            return $this->getVar('views');
        case 'Links':
            return $this->_fetchLinks(0, 0, $sort, $order);
        case 'LastLink':
            return $this->_fetchLastLink();
        case 'Releases':
            return $this->_fetchReleases(0, 0, $sort, $order);
        case 'LastRelease':
            return $this->_fetchLastRelease();
        case 'Comments':
            return $this->_fetchComments(0, 0, $sort, $order);
        case 'LastComment':
            return $this->_fetchLastComment();
        case 'Developers':
            return $this->_fetchDevelopers(0, 0, $sort, $order);
        case 'LastDeveloper':
            return $this->_fetchLastDeveloper();
        case 'Abuses':
            return $this->_fetchAbuses(0, 0, $sort, $order);
        case 'LastAbuse':
            return $this->_fetchLastAbuse();
        case 'Images':
            return $this->_fetchImages(0, 0, $sort, $order);
        case 'LastImage':
            return $this->_fetchLastImage();
        case 'Categories':
            return $this->_fetchCategories(0, 0, $sort, $order);
        case 'User':
            return $this->_fetchUser();
        case 'UserWithData':
            return $this->_fetchUser(true);
        }
    }

    public function __set($name, $value)
    {
        switch ($name) {
        case 'name':
            $this->setVar('name', $value);
            break;
        case 'summary':
            $this->setVar('summary', $value);
            break;
        case 'summary_html':
            $this->setVar('summary_html', $value);
            break;
        case 'summary_filter_id':
            $this->setVar('summary_filter_id', $value);
            break;
        case 'data':
            $this->setVar('data', $value);
            break;
        case 'release_latest':
            $this->setVar('release_latest', $value);
            break;
        case 'lastupdate':
            $this->setVar('lastupdate', $value);
            break;
        case 'image_featured':
            $this->setVar('image_featured', $value);
            break;
        case 'status':
            $this->setVar('status', $value);
            break;
        case 'hidden':
            $this->setVar('hidden', $value);
            break;
        case 'allow_comments':
            $this->setVar('allow_comments', $value);
            break;
        case 'allow_links':
            $this->setVar('allow_links', $value);
            break;
        case 'allow_images':
            $this->setVar('allow_images', $value);
            break;
        case 'allow_releases':
            $this->setVar('allow_releases', $value);
            break;
        case 'comment_rating':
            $this->setVar('comment_rating', $value);
            break;
        case 'views':
            $this->setVar('views', $value);
            break;
        case 'Links':
            $this->removeLinks();
            foreach (array_keys($value) as $i) {
                $this->addLink($value[$i]);
            }
            break;
        case 'Releases':
            $this->removeReleases();
            foreach (array_keys($value) as $i) {
                $this->addRelease($value[$i]);
            }
            break;
        case 'Comments':
            $this->removeComments();
            foreach (array_keys($value) as $i) {
                $this->addComment($value[$i]);
            }
            break;
        case 'Developers':
            $this->removeDevelopers();
            foreach (array_keys($value) as $i) {
                $this->addDeveloper($value[$i]);
            }
            break;
        case 'Abuses':
            $this->removeAbuses();
            foreach (array_keys($value) as $i) {
                $this->addAbuse($value[$i]);
            }
            break;
        case 'Images':
            $this->removeImages();
            foreach (array_keys($value) as $i) {
                $this->addImage($value[$i]);
            }
            break;
        case 'Categories':
            $this->unlinkCategories();
            foreach (array_keys($value) as $i) {
                if (is_object($value[$i])) {
                    $this->linkCategory($value[$i]);
                } else {
                    $this->linkCategoryById($value[$i]);
                }
            }
            break;
        }
    }

    public function initVar($name, $value)
    {
        switch ($name) {
        default:
            $this->_vars[$name] = $value;
            break;
        }
    }
}

abstract class Plugg_Project_Model_Base_ProjectRepository extends Sabai_Model_EntityRepository
{
    public function __construct(Sabai_Model $model)
    {
        parent::__construct('Project', $model);
    }
    public function fetchByUser($id, $limit = 0, $offset = 0, $sort = null, $order = null)
    {
        return $this->_fetchByForeign('project_userid', $id, $limit, $offset, $sort, $order);
    }

    public function paginateByUser($id, $perpage = 10, $sort = null, $order = null)
    {
        return $this->_paginateByEntity('User', $id, $perpage, $sort, $order);
    }

    public function countByUser($id)
    {
        return $this->_countByForeign('project_userid', $id);
    }

    public function fetchByUserAndCriteria($id, Sabai_Model_Criteria $criteria, $limit = 0, $offset = 0, $sort = null, $order = null)
    {
        return $this->_fetchByForeignAndCriteria('project_userid', $id, $criteria, $limit, $offset, $sort, $order);
    }

    public function paginateByUserAndCriteria($id, Sabai_Model_Criteria $criteria, $perpage = 10, $sort = null, $order = null)
    {
        return $this->_paginateByEntityAndCriteria('User', $id, $criteria, $perpage, $sort, $order);
    }

    public function countByUserAndCriteria($id, Sabai_Model_Criteria $criteria)
    {
        return $this->_countByForeignAndCriteria('project_userid', $id, $criteria);
    }

    public function fetchByCategory($id, $limit = 0, $offset = 0, $sort = null, $order = null)
    {
        return $this->_fetchByAssoc('project', 'Project2category', 'project2category_category_id', $id, $limit, $offset, $sort, $order);
    }

    public function paginateByCategory($id, $perpage = 10, $sort = null, $order = null)
    {
        return $this->_paginateByEntity('Category', $id, $perpage, $sort, $order);
    }

    public function countByCategory($id)
    {
        return $this->_countByAssoc('project_id', 'Project2category', 'project2category_category_id', $id);
    }

    public function fetchByCategoryAndCriteria($id, Sabai_Model_Criteria $criteria, $limit = 0, $offset = 0, $sort = null, $order = null)
    {
        return $this->_fetchByAssocAndCriteria('project', 'Project2category', 'project2category_category_id', $id, $criteria, $limit, $offset, $sort, $order);
    }

    public function countByCategoryAndCriteria($id, Sabai_Model_Criteria $criteria)
    {
        return $this->_countByAssocAndCriteria('project_id', 'Project2category', 'project2category_category_id', $id, $criteria);
    }

    public function paginateByCategoryAndCriteria($id, Sabai_Model_Criteria $criteria, $perpage = 10, $sort = null, $order = null)
    {
        return $this->_paginateByEntityAndCriteria('Category', $id, $criteria, $perpage, $sort, $order);
    }

    protected function _getCollectionByRowset(Sabai_DB_Rowset $rs)
    {
        return new Plugg_Project_Model_Base_ProjectsByRowset($rs, $this->_model->create('Project'), $this->_model);
    }

    public function createCollection(array $entities = array())
    {
        return new Plugg_Project_Model_Base_Projects($this->_model, $entities);
    }
}

class Plugg_Project_Model_Base_ProjectsByRowset extends Sabai_Model_EntityCollection_Rowset
{
    public function __construct(Sabai_DB_Rowset $rs, Sabai_Model_Entity $emptyEntity, Sabai_Model $model)
    {
        parent::__construct('Projects', $rs, $emptyEntity, $model);
    }

    protected function _loadRow(Sabai_Model_Entity $entity, array $row)
    {
        $entity->initVars($row);
    }
}

class Plugg_Project_Model_Base_Projects extends Sabai_Model_EntityCollection_Array
{
    public function __construct(Sabai_Model $model, array $entities = array())
    {
        parent::__construct($model, 'Projects', $entities);
    }
}