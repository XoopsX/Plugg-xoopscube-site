<?php
/*
This file has been generated by the Sabai scaffold script. Do not edit this file directly.
If you need to customize the class, use the following file:
plugins/Project/Model/Project2category.php
*/
abstract class Plugg_Project_Model_Base_Project2category extends Sabai_Model_Entity
{
    public function __construct(Sabai_Model $model)
    {
        parent::__construct('Project2category', $model);
        $this->_vars = array('project2category_id' => 0, 'project2category_created' => 0, 'project2category_updated' => 0, 'project2category_project_id' => null, 'project2category_category_id' => null);
    }

    public function getId()
    {
        return $this->getVar('id');
    }

    public function setId($value)
    {
        $this->setVar('id', $value);
    }

    public function getTimeCreated()
    {
        return $this->getVar('created');
    }

    public function getTimeUpdated()
    {
        return $this->getVar('updated');
    }

    public function assignProject(Sabai_Model_Entity $entity)
    {
        if ($entity->getName() != 'Project') return false;

        return $this->_assignEntity($entity, 'project_id');
    }

    public function unassignProject()
    {
        return $this->_unassignEntity('Project', 'project_id');
    }

    protected function _fetchProject()
    {
        return $this->_fetchEntity('Project', 'project_id');
    }

    public function assignCategory(Sabai_Model_Entity $entity)
    {
        if ($entity->getName() != 'Category') return false;

        return $this->_assignEntity($entity, 'category_id');
    }

    public function unassignCategory()
    {
        return $this->_unassignEntity('Category', 'category_id');
    }

    protected function _fetchCategory()
    {
        return $this->_fetchEntity('Category', 'category_id');
    }

    protected function _getVar($name)
    {
        return $this->_vars['project2category_' . $name];
    }

    protected function _setVar($name, $value)
    {
        switch ($name) {
        case 'id':
            $this->_vars['project2category_id'] = $value;
            break;
        case 'project_id':
            $this->_vars['project2category_project_id'] = $value;
            break;
        case 'category_id':
            $this->_vars['project2category_category_id'] = $value;
            break;
        default:
            trigger_error(sprintf('Error trying to set value for variable %s. This variable is either read-only or does not exist for this entity', $name), E_USER_WARNING);
            return false;
        }
        return true;
    }

    protected function _get($name, $sort, $order)
    {
        switch ($name) {
        case 'Project':
            return $this->_fetchProject();
        case 'Category':
            return $this->_fetchCategory();
        }
    }

    public function __set($name, $value)
    {
        switch ($name) {
        case 'Project':
            $entity = is_array($value) ? $value[0] : $value;
            $this->assignProject($entity);
            break;
        case 'Category':
            $entity = is_array($value) ? $value[0] : $value;
            $this->assignCategory($entity);
            break;
        }
    }

    public function initVar($name, $value)
    {
        switch ($name) {
        default:
            $this->_vars[$name] = $value;
            break;
        }
    }
}

abstract class Plugg_Project_Model_Base_Project2categoryRepository extends Sabai_Model_EntityRepository
{
    public function __construct(Sabai_Model $model)
    {
        parent::__construct('Project2category', $model);
    }

    public function fetchByProject($id, $limit = 0, $offset = 0, $sort = null, $order = null)
    {
        return $this->_fetchByForeign('project2category_project_id', $id, $limit, $offset, $sort, $order);
    }

    public function paginateByProject($id, $perpage = 10, $sort = null, $order = null)
    {
        return $this->_paginateByEntity('Project', $id, $perpage, $sort, $order);
    }

    public function countByProject($id)
    {
        return $this->_countByForeign('project2category_project_id', $id);
    }

    public function fetchByProjectAndCriteria($id, Sabai_Model_Criteria $criteria, $limit = 0, $offset = 0, $sort = null, $order = null)
    {
        return $this->_fetchByForeignAndCriteria('project2category_project_id', $id, $criteria, $limit, $offset, $sort, $order);
    }

    public function paginateByProjectAndCriteria($id, Sabai_Model_Criteria $criteria, $perpage = 10, $sort = null, $order = null)
    {
        return $this->_paginateByEntityAndCriteria('Project', $id, $criteria, $perpage, $sort, $order);
    }

    public function countByProjectAndCriteria($id, Sabai_Model_Criteria $criteria)
    {
        return $this->_countByForeignAndCriteria('project2category_project_id', $id, $criteria);
    }

    public function fetchByCategory($id, $limit = 0, $offset = 0, $sort = null, $order = null)
    {
        return $this->_fetchByForeign('project2category_category_id', $id, $limit, $offset, $sort, $order);
    }

    public function paginateByCategory($id, $perpage = 10, $sort = null, $order = null)
    {
        return $this->_paginateByEntity('Category', $id, $perpage, $sort, $order);
    }

    public function countByCategory($id)
    {
        return $this->_countByForeign('project2category_category_id', $id);
    }

    public function fetchByCategoryAndCriteria($id, Sabai_Model_Criteria $criteria, $limit = 0, $offset = 0, $sort = null, $order = null)
    {
        return $this->_fetchByForeignAndCriteria('project2category_category_id', $id, $criteria, $limit, $offset, $sort, $order);
    }

    public function paginateByCategoryAndCriteria($id, Sabai_Model_Criteria $criteria, $perpage = 10, $sort = null, $order = null)
    {
        return $this->_paginateByEntityAndCriteria('Category', $id, $criteria, $perpage, $sort, $order);
    }

    public function countByCategoryAndCriteria($id, Sabai_Model_Criteria $criteria)
    {
        return $this->_countByForeignAndCriteria('project2category_category_id', $id, $criteria);
    }

    protected function _getCollectionByRowset(Sabai_DB_Rowset $rs)
    {
        return new Plugg_Project_Model_Base_Project2categoriesByRowset($rs, $this->_model->create('Project2category'), $this->_model);
    }

    public function createCollection(array $entities = array())
    {
        return new Plugg_Project_Model_Base_Project2categories($this->_model, $entities);
    }
}

class Plugg_Project_Model_Base_Project2categoriesByRowset extends Sabai_Model_EntityCollection_Rowset
{
    public function __construct(Sabai_DB_Rowset $rs, Sabai_Model_Entity $emptyEntity, Sabai_Model $model)
    {
        parent::__construct('Project2categories', $rs, $emptyEntity, $model);
    }

    protected function _loadRow(Sabai_Model_Entity $entity, array $row)
    {
        $arr['project2category_id'] = $row['project2category_id'];
        $arr['project2category_created'] = $row['project2category_created'];
        $arr['project2category_updated'] = $row['project2category_updated'];
        $arr['project2category_project_id'] = $row['project2category_project_id'];
        $arr['project2category_category_id'] = $row['project2category_category_id'];
        $entity->initVars($arr);
        if (isset($row['project_id'])) {
            $project['project_id'] = $row['project_id'];
            $project['project_created'] = $row['project_created'];
            $project['project_updated'] = $row['project_updated'];
            $project['project_name'] = $row['project_name'];
            $project['project_summary'] = $row['project_summary'];
            $project['project_summary_html'] = $row['project_summary_html'];
            $project['project_summary_filter_id'] = $row['project_summary_filter_id'];
            $project['project_data'] = $row['project_data'];
            $project['project_release_latest'] = $row['project_release_latest'];
            $project['project_lastupdate'] = $row['project_lastupdate'];
            $project['project_image_featured'] = $row['project_image_featured'];
            $project['project_status'] = $row['project_status'];
            $project['project_hidden'] = $row['project_hidden'];
            $project['project_allow_comments'] = $row['project_allow_comments'];
            $project['project_allow_links'] = $row['project_allow_links'];
            $project['project_allow_images'] = $row['project_allow_images'];
            $project['project_allow_releases'] = $row['project_allow_releases'];
            $project['project_comment_rating'] = $row['project_comment_rating'];
            $project['project_views'] = $row['project_views'];
            $project['project_userid'] = $row['project_userid'];
            $project['project_link_count'] = $row['project_link_count'];
            $project['project_link_last'] = $row['project_link_last'];
            $project['project_link_lasttime'] = $row['project_link_lasttime'];
            $project['project_release_count'] = $row['project_release_count'];
            $project['project_release_last'] = $row['project_release_last'];
            $project['project_release_lasttime'] = $row['project_release_lasttime'];
            $project['project_comment_count'] = $row['project_comment_count'];
            $project['project_comment_last'] = $row['project_comment_last'];
            $project['project_comment_lasttime'] = $row['project_comment_lasttime'];
            $project['project_developer_count'] = $row['project_developer_count'];
            $project['project_developer_last'] = $row['project_developer_last'];
            $project['project_developer_lasttime'] = $row['project_developer_lasttime'];
            $project['project_abuse_count'] = $row['project_abuse_count'];
            $project['project_abuse_last'] = $row['project_abuse_last'];
            $project['project_abuse_lasttime'] = $row['project_abuse_lasttime'];
            $project['project_image_count'] = $row['project_image_count'];
            $project['project_image_last'] = $row['project_image_last'];
            $project['project_image_lasttime'] = $row['project_image_lasttime'];
            $Project = $this->_model->create('Project');
            $Project->initVars($project);
            $Project->cache();
        }
        if (isset($row['category_id'])) {
            $category['category_id'] = $row['category_id'];
            $category['category_created'] = $row['category_created'];
            $category['category_updated'] = $row['category_updated'];
            $category['category_name'] = $row['category_name'];
            $category['category_description'] = $row['category_description'];
            $category['category_order'] = $row['category_order'];
            $Category = $this->_model->create('Category');
            $Category->initVars($category);
            $Category->cache();
        }
    }
}

class Plugg_Project_Model_Base_Project2categories extends Sabai_Model_EntityCollection_Array
{
    public function __construct(Sabai_Model $model, array $entities = array())
    {
        parent::__construct($model, 'Project2categories', $entities);
    }
}