<?php
/*
This file has been generated by the Sabai scaffold script. Do not edit this file directly.
If you need to customize the class, use the following file:
pluginsy/Project/Model/ProjectGateway.php
*/
abstract class Plugg_Project_Model_Base_ProjectGateway extends Sabai_Model_Gateway
{
    public function getName()
    {
        return 'project';
    }

    public function getFields()
    {
        return array('project_id' => Sabai_Model::KEY_TYPE_INT, 'project_created' => Sabai_Model::KEY_TYPE_INT, 'project_updated' => Sabai_Model::KEY_TYPE_INT, 'project_name' => Sabai_Model::KEY_TYPE_VARCHAR, 'project_summary' => Sabai_Model::KEY_TYPE_TEXT, 'project_summary_html' => Sabai_Model::KEY_TYPE_TEXT, 'project_summary_filter_id' => Sabai_Model::KEY_TYPE_INT, 'project_data' => Sabai_Model::KEY_TYPE_TEXT, 'project_release_latest' => Sabai_Model::KEY_TYPE_INT, 'project_lastupdate' => Sabai_Model::KEY_TYPE_INT, 'project_image_featured' => Sabai_Model::KEY_TYPE_INT, 'project_status' => Sabai_Model::KEY_TYPE_INT, 'project_hidden' => Sabai_Model::KEY_TYPE_INT, 'project_allow_comments' => Sabai_Model::KEY_TYPE_INT, 'project_allow_links' => Sabai_Model::KEY_TYPE_INT, 'project_allow_images' => Sabai_Model::KEY_TYPE_INT, 'project_allow_releases' => Sabai_Model::KEY_TYPE_INT, 'project_comment_rating' => Sabai_Model::KEY_TYPE_FLOAT, 'project_views' => Sabai_Model::KEY_TYPE_INT, 'project_userid' => Sabai_Model::KEY_TYPE_VARCHAR, 'project_link_count' => Sabai_Model::KEY_TYPE_INT, 'project_link_last' => Sabai_Model::KEY_TYPE_INT, 'project_link_lasttime' => Sabai_Model::KEY_TYPE_INT, 'project_release_count' => Sabai_Model::KEY_TYPE_INT, 'project_release_last' => Sabai_Model::KEY_TYPE_INT, 'project_release_lasttime' => Sabai_Model::KEY_TYPE_INT, 'project_comment_count' => Sabai_Model::KEY_TYPE_INT, 'project_comment_last' => Sabai_Model::KEY_TYPE_INT, 'project_comment_lasttime' => Sabai_Model::KEY_TYPE_INT, 'project_developer_count' => Sabai_Model::KEY_TYPE_INT, 'project_developer_last' => Sabai_Model::KEY_TYPE_INT, 'project_developer_lasttime' => Sabai_Model::KEY_TYPE_INT, 'project_abuse_count' => Sabai_Model::KEY_TYPE_INT, 'project_abuse_last' => Sabai_Model::KEY_TYPE_INT, 'project_abuse_lasttime' => Sabai_Model::KEY_TYPE_INT, 'project_image_count' => Sabai_Model::KEY_TYPE_INT, 'project_image_last' => Sabai_Model::KEY_TYPE_INT, 'project_image_lasttime' => Sabai_Model::KEY_TYPE_INT);
    }

    protected function _getSelectByIdQuery($id, array $fields)
    {
        $fields = empty($fields) ? '*' : implode(', ', $fields);
        return sprintf('SELECT %s FROM %sproject WHERE project_id = %d', $fields, $this->_db->getResourcePrefix(), $id);
    }

    protected function _getSelectByCriteriaQuery($criteriaStr, array $fields)
    {
        $fields = empty($fields) ? '*' : implode(', ', $fields);
        return sprintf('SELECT %1$s FROM %2$sproject WHERE %3$s', $fields, $this->_db->getResourcePrefix(), $criteriaStr);
    }

    protected function _getInsertQuery(array $values)
    {
        $values['project_created'] = time();
        $values['project_updated'] = 0;
        $values['project_link_lasttime'] = $values['project_created'];
        $values['project_release_lasttime'] = $values['project_created'];
        $values['project_comment_lasttime'] = $values['project_created'];
        $values['project_developer_lasttime'] = $values['project_created'];
        $values['project_abuse_lasttime'] = $values['project_created'];
        $values['project_image_lasttime'] = $values['project_created'];
        return sprintf("INSERT INTO %sproject(project_created, project_updated, project_name, project_summary, project_summary_html, project_summary_filter_id, project_data, project_release_latest, project_lastupdate, project_image_featured, project_status, project_hidden, project_allow_comments, project_allow_links, project_allow_images, project_allow_releases, project_comment_rating, project_views, project_userid, project_link_count, project_link_last, project_link_lasttime, project_release_count, project_release_last, project_release_lasttime, project_comment_count, project_comment_last, project_comment_lasttime, project_developer_count, project_developer_last, project_developer_lasttime, project_abuse_count, project_abuse_last, project_abuse_lasttime, project_image_count, project_image_last, project_image_lasttime) VALUES(%d, %d, %s, %s, %s, %d, %s, %d, %d, %d, %d, %d, %d, %d, %d, %d, %f, %d, %s, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d)", $this->_db->getResourcePrefix(), $values['project_created'], $values['project_updated'], $this->_db->escapeString($values['project_name']), $this->_db->escapeString($values['project_summary']), $this->_db->escapeString($values['project_summary_html']), $values['project_summary_filter_id'], $this->_db->escapeString($values['project_data']), $values['project_release_latest'], $values['project_lastupdate'], $values['project_image_featured'], $values['project_status'], $values['project_hidden'], $values['project_allow_comments'], $values['project_allow_links'], $values['project_allow_images'], $values['project_allow_releases'], $values['project_comment_rating'], $values['project_views'], $this->_db->escapeString($values['project_userid']), $values['project_link_count'], $values['project_link_last'], $values['project_link_lasttime'], $values['project_release_count'], $values['project_release_last'], $values['project_release_lasttime'], $values['project_comment_count'], $values['project_comment_last'], $values['project_comment_lasttime'], $values['project_developer_count'], $values['project_developer_last'], $values['project_developer_lasttime'], $values['project_abuse_count'], $values['project_abuse_last'], $values['project_abuse_lasttime'], $values['project_image_count'], $values['project_image_last'], $values['project_image_lasttime']);
    }

    protected function _getUpdateQuery($id, array $values)
    {
        $last_update = $values['project_updated'];
        $values['project_updated'] = time();
        return sprintf("UPDATE %sproject SET project_updated = %d, project_name = %s, project_summary = %s, project_summary_html = %s, project_summary_filter_id = %d, project_data = %s, project_release_latest = %d, project_lastupdate = %d, project_image_featured = %d, project_status = %d, project_hidden = %d, project_allow_comments = %d, project_allow_links = %d, project_allow_images = %d, project_allow_releases = %d, project_comment_rating = %f, project_views = %d, project_userid = %s, project_link_count = %d, project_link_last = %d, project_link_lasttime = %d, project_release_count = %d, project_release_last = %d, project_release_lasttime = %d, project_comment_count = %d, project_comment_last = %d, project_comment_lasttime = %d, project_developer_count = %d, project_developer_last = %d, project_developer_lasttime = %d, project_abuse_count = %d, project_abuse_last = %d, project_abuse_lasttime = %d, project_image_count = %d, project_image_last = %d, project_image_lasttime = %d WHERE project_id = %d AND project_updated = %d", $this->_db->getResourcePrefix(), $values['project_updated'], $this->_db->escapeString($values['project_name']), $this->_db->escapeString($values['project_summary']), $this->_db->escapeString($values['project_summary_html']), $values['project_summary_filter_id'], $this->_db->escapeString($values['project_data']), $values['project_release_latest'], $values['project_lastupdate'], $values['project_image_featured'], $values['project_status'], $values['project_hidden'], $values['project_allow_comments'], $values['project_allow_links'], $values['project_allow_images'], $values['project_allow_releases'], $values['project_comment_rating'], $values['project_views'], $this->_db->escapeString($values['project_userid']), $values['project_link_count'], $values['project_link_last'], $values['project_link_lasttime'], $values['project_release_count'], $values['project_release_last'], $values['project_release_lasttime'], $values['project_comment_count'], $values['project_comment_last'], $values['project_comment_lasttime'], $values['project_developer_count'], $values['project_developer_last'], $values['project_developer_lasttime'], $values['project_abuse_count'], $values['project_abuse_last'], $values['project_abuse_lasttime'], $values['project_image_count'], $values['project_image_last'], $values['project_image_lasttime'], $id, $last_update);
    }

    protected function _getDeleteQuery($id)
    {
        return sprintf('DELETE FROM %1$sproject WHERE project_id = %2$d', $this->_db->getResourcePrefix(), $id);
    }

    protected function _getUpdateByCriteriaQuery($criteriaStr, array $sets)
    {
        $sets['project_updated'] = 'project_updated=' . time();
        return sprintf('UPDATE %sproject SET %s WHERE %s', $this->_db->getResourcePrefix(), implode(',', $sets), $criteriaStr);
    }

    protected function _getDeleteByCriteriaQuery($criteriaStr)
    {
        return sprintf('DELETE FROM %1$sproject WHERE %2$s', $this->_db->getResourcePrefix(), $criteriaStr);
    }

    protected function _getCountByCriteriaQuery($criteriaStr)
    {
        return sprintf('SELECT COUNT(*) FROM %1$sproject WHERE %2$s', $this->_db->getResourcePrefix(), $criteriaStr);
    }

    protected function _beforeDeleteTrigger1($id, array $old)
    {
        return $this->_db->exec(sprintf('DELETE %1$slink,%1$slinkvote FROM %1$slink LEFT JOIN %1$slinkvote ON %1$slink.link_id = %1$slinkvote.linkvote_link_id WHERE %1$slink.link_project_id = %2$d', $this->_db->getResourcePrefix(), $id), false);
    }

    protected function _beforeDeleteTrigger2($id, array $old)
    {
        return $this->_db->exec(sprintf('DELETE %1$srelease,%1$sreport FROM %1$srelease LEFT JOIN %1$sreport ON %1$srelease.release_id = %1$sreport.report_release_id WHERE %1$srelease.release_project_id = %2$d', $this->_db->getResourcePrefix(), $id), false);
    }

    protected function _beforeDeleteTrigger3($id, array $old)
    {
        return $this->_db->exec(sprintf('DELETE FROM %1$scomment WHERE %1$scomment.comment_project_id = %2$d', $this->_db->getResourcePrefix(), $id), false);
    }

    protected function _beforeDeleteTrigger4($id, array $old)
    {
        return $this->_db->exec(sprintf('DELETE FROM %1$sdeveloper WHERE %1$sdeveloper.developer_project_id = %2$d', $this->_db->getResourcePrefix(), $id), false);
    }

    protected function _beforeDeleteTrigger5($id, array $old)
    {
        return $this->_db->exec(sprintf('DELETE FROM %1$sabuse WHERE %1$sabuse.abuse_project_id = %2$d', $this->_db->getResourcePrefix(), $id), false);
    }

    protected function _beforeDeleteTrigger6($id, array $old)
    {
        return $this->_db->exec(sprintf('DELETE FROM %1$simage WHERE %1$simage.image_project_id = %2$d', $this->_db->getResourcePrefix(), $id), false);
    }

    protected function _beforeDeleteTrigger7($id, array $old)
    {
        return $this->_db->exec(sprintf('DELETE FROM %1$sproject2category WHERE %1$sproject2category.project2category_project_id = %2$d', $this->_db->getResourcePrefix(), $id), false);
    }

    protected function _beforeDeleteTrigger($id, array $old)
    {
        if (!$this->_beforeDeleteTrigger1($id, $old)) return false;
        if (!$this->_beforeDeleteTrigger2($id, $old)) return false;
        if (!$this->_beforeDeleteTrigger3($id, $old)) return false;
        if (!$this->_beforeDeleteTrigger4($id, $old)) return false;
        if (!$this->_beforeDeleteTrigger5($id, $old)) return false;
        if (!$this->_beforeDeleteTrigger6($id, $old)) return false;
        if (!$this->_beforeDeleteTrigger7($id, $old)) return false;
        return true;
    }
}