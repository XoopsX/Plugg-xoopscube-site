<?php
/*
This file has been generated by the Sabai scaffold script. Do not edit this file directly.
If you need to customize the class, use the following file:
pluginsy/Project/Model/ReleaseGateway.php
*/
abstract class Plugg_Project_Model_Base_ReleaseGateway extends Sabai_Model_Gateway
{
    public function getName()
    {
        return 'release';
    }

    public function getFields()
    {
        return array('release_id' => Sabai_Model::KEY_TYPE_INT, 'release_created' => Sabai_Model::KEY_TYPE_INT, 'release_updated' => Sabai_Model::KEY_TYPE_INT, 'release_version' => Sabai_Model::KEY_TYPE_VARCHAR, 'release_stability' => Sabai_Model::KEY_TYPE_INT, 'release_date' => Sabai_Model::KEY_TYPE_INT, 'release_download_url' => Sabai_Model::KEY_TYPE_VARCHAR, 'release_note_url' => Sabai_Model::KEY_TYPE_VARCHAR, 'release_summary' => Sabai_Model::KEY_TYPE_TEXT, 'release_summary_html' => Sabai_Model::KEY_TYPE_TEXT, 'release_summary_filter_id' => Sabai_Model::KEY_TYPE_INT, 'release_status' => Sabai_Model::KEY_TYPE_INT, 'release_allow_reports' => Sabai_Model::KEY_TYPE_INT, 'release_allow_download' => Sabai_Model::KEY_TYPE_INT, 'release_project_id' => Sabai_Model::KEY_TYPE_INT_NULL, 'release_userid' => Sabai_Model::KEY_TYPE_VARCHAR, 'release_report_count' => Sabai_Model::KEY_TYPE_INT, 'release_report_last' => Sabai_Model::KEY_TYPE_INT, 'release_report_lasttime' => Sabai_Model::KEY_TYPE_INT);
    }

    protected function _getSelectByIdQuery($id, array $fields)
    {
        $fields = empty($fields) ? '*' : implode(', ', $fields);
        return sprintf('SELECT %s FROM %srelease WHERE release_id = %d', $fields, $this->_db->getResourcePrefix(), $id);
    }

    protected function _getSelectByCriteriaQuery($criteriaStr, array $fields)
    {
        $fields = empty($fields) ? '*' : implode(', ', $fields);
        return sprintf('SELECT %1$s FROM %2$srelease WHERE %3$s', $fields, $this->_db->getResourcePrefix(), $criteriaStr);
    }

    protected function _getInsertQuery(array $values)
    {
        $values['release_created'] = time();
        $values['release_updated'] = 0;
        $values['release_report_lasttime'] = $values['release_created'];
        $values['release_project_id'] = !empty($values['release_project_id']) ? intval($values['release_project_id']) : 'NULL';
        return sprintf("INSERT INTO %srelease(release_created, release_updated, release_version, release_stability, release_date, release_download_url, release_note_url, release_summary, release_summary_html, release_summary_filter_id, release_status, release_allow_reports, release_allow_download, release_project_id, release_userid, release_report_count, release_report_last, release_report_lasttime) VALUES(%d, %d, %s, %d, %d, %s, %s, %s, %s, %d, %d, %d, %d, %s, %s, %d, %d, %d)", $this->_db->getResourcePrefix(), $values['release_created'], $values['release_updated'], $this->_db->escapeString($values['release_version']), $values['release_stability'], $values['release_date'], $this->_db->escapeString($values['release_download_url']), $this->_db->escapeString($values['release_note_url']), $this->_db->escapeString($values['release_summary']), $this->_db->escapeString($values['release_summary_html']), $values['release_summary_filter_id'], $values['release_status'], $values['release_allow_reports'], $values['release_allow_download'], $values['release_project_id'], $this->_db->escapeString($values['release_userid']), $values['release_report_count'], $values['release_report_last'], $values['release_report_lasttime']);
    }

    protected function _getUpdateQuery($id, array $values)
    {
        $values['release_project_id'] = !empty($values['release_project_id']) ? intval($values['release_project_id']) : 'NULL';
        $last_update = $values['release_updated'];
        $values['release_updated'] = time();
        return sprintf("UPDATE %srelease SET release_updated = %d, release_version = %s, release_stability = %d, release_date = %d, release_download_url = %s, release_note_url = %s, release_summary = %s, release_summary_html = %s, release_summary_filter_id = %d, release_status = %d, release_allow_reports = %d, release_allow_download = %d, release_project_id = %s, release_userid = %s, release_report_count = %d, release_report_last = %d, release_report_lasttime = %d WHERE release_id = %d AND release_updated = %d", $this->_db->getResourcePrefix(), $values['release_updated'], $this->_db->escapeString($values['release_version']), $values['release_stability'], $values['release_date'], $this->_db->escapeString($values['release_download_url']), $this->_db->escapeString($values['release_note_url']), $this->_db->escapeString($values['release_summary']), $this->_db->escapeString($values['release_summary_html']), $values['release_summary_filter_id'], $values['release_status'], $values['release_allow_reports'], $values['release_allow_download'], $values['release_project_id'], $this->_db->escapeString($values['release_userid']), $values['release_report_count'], $values['release_report_last'], $values['release_report_lasttime'], $id, $last_update);
    }

    protected function _getDeleteQuery($id)
    {
        return sprintf('DELETE FROM %1$srelease WHERE release_id = %2$d', $this->_db->getResourcePrefix(), $id);
    }

    protected function _getUpdateByCriteriaQuery($criteriaStr, array $sets)
    {
        $sets['release_updated'] = 'release_updated=' . time();
        return sprintf('UPDATE %srelease SET %s WHERE %s', $this->_db->getResourcePrefix(), implode(',', $sets), $criteriaStr);
    }

    protected function _getDeleteByCriteriaQuery($criteriaStr)
    {
        return sprintf('DELETE FROM %1$srelease WHERE %2$s', $this->_db->getResourcePrefix(), $criteriaStr);
    }

    protected function _getCountByCriteriaQuery($criteriaStr)
    {
        return sprintf('SELECT COUNT(*) FROM %1$srelease WHERE %2$s', $this->_db->getResourcePrefix(), $criteriaStr);
    }

    protected function _afterInsertTrigger1($id, array $new)
    {
        if (!empty($new['release_project_id'])) {
            $this->_db->exec(sprintf('UPDATE %sproject SET project_release_count = project_release_count + 1, project_release_last = %d, project_release_lasttime = %d WHERE project_id = %d', $this->_db->getResourcePrefix(), $id, $new['release_created'], $new['release_project_id']));
        }
    }

    protected function _afterDeleteTrigger1($id, array $old)
    {
        if (!empty($old['release_project_id'])) {
            $sql = sprintf('SELECT release_id, release_created FROM %srelease WHERE release_project_id = %d ORDER BY release_created DESC', $this->_db->getResourcePrefix(), $old['release_project_id']);
            if (($rs = $this->_db->query($sql, 1, 0)) && ($rs->rowCount() > 0)) {
                $row = $rs->fetchAssoc();
                $this->_db->exec(sprintf('UPDATE %sproject SET project_release_count = project_release_count - 1, project_release_last = %d, project_release_lasttime = %d WHERE project_id = %d', $this->_db->getResourcePrefix(), $row['release_id'], $row['release_created'], $old['release_project_id']));
            } else {
                $this->_db->exec(sprintf('UPDATE %sproject SET project_release_count = project_release_count - 1, project_release_last = 0, project_release_lasttime = project_created WHERE project_id = %d', $this->_db->getResourcePrefix(), $old['release_project_id']));
            }
        }
    }

    protected function _afterUpdateTrigger1($id, array $new, array $old)
    {
        if (empty($old['release_project_id']) && !empty($new['release_project_id'])) {
            $this->_db->exec(sprintf('UPDATE %sproject SET project_release_count = project_release_count + 1, project_release_last = %d, project_release_lasttime = %d WHERE project_id = %d', $this->_db->getResourcePrefix(), $id, $new['release_created'], $new['release_project_id']));
        } elseif (!empty($old['release_project_id']) && empty($new['release_project_id'])) {
            $sql = sprintf('SELECT release_id, release_created FROM %srelease WHERE release_project_id = %d ORDER BY release_created DESC', $this->_db->getResourcePrefix(), $old['release_project_id']);
            if (($rs = $this->_db->query($sql, 1, 0)) && ($rs->rowCount() > 0)) {
                $row = $rs->fetchAssoc();
                $this->_db->exec(sprintf('UPDATE %sproject SET project_release_count = project_release_count - 1, project_release_last = %d, project_release_lasttime = %d WHERE project_id = %d', $this->_db->getResourcePrefix(), $row['release_id'], $row['release_created'], $old['release_project_id']));
            } else {
                $this->_db->exec(sprintf('UPDATE %sproject SET project_release_count = project_release_count - 1, project_release_last = 0, project_release_lasttime = project_created WHERE project_id = %d', $this->_db->getResourcePrefix(), $old['release_project_id']));
            }
        } elseif ($old['release_project_id'] != $new['release_project_id']) {
            $sql = sprintf('SELECT release_id, release_created FROM %srelease WHERE release_project_id = %d ORDER BY release_created DESC', $this->_db->getResourcePrefix(), $old['release_project_id']);
            if (($rs = $this->_db->query($sql, 1, 0)) && ($rs->rowCount() > 0)) {
                $row = $rs->fetchAssoc();
                $this->_db->exec(sprintf('UPDATE %sproject SET project_release_count = project_release_count - 1, project_release_last = %d, project_release_lasttime = %d WHERE project_id = %d', $this->_db->getResourcePrefix(), $row['release_id'], $row['release_created'], $old['release_project_id']));
            } else {
                $this->_db->exec(sprintf('UPDATE %sproject SET project_release_count = project_release_count - 1, project_release_last = 0, project_release_lasttime = project_created WHERE project_id = %d', $this->_db->getResourcePrefix(), $old['release_project_id']));
            }
            $this->_db->exec(sprintf('UPDATE %sproject SET project_release_count = project_release_count + 1, project_release_last = %d, project_release_lasttime = %d WHERE project_id = %d', $this->_db->getResourcePrefix(), $id, $new['release_created'], $new['release_project_id']));
        }
    }

    protected function _beforeDeleteTrigger1($id, array $old)
    {
        return $this->_db->exec(sprintf('DELETE FROM %1$sreport WHERE %1$sreport.report_release_id = %2$d', $this->_db->getResourcePrefix(), $id), false);
    }

    protected function _afterInsertTrigger($id, array $new)
    {
        $this->_afterInsertTrigger1($id, $new);
    }

    protected function _afterUpdateTrigger($id, array $new, array $old)
    {
        $this->_afterUpdateTrigger1($id, $new, $old);
    }

    protected function _beforeDeleteTrigger($id, array $old)
    {
        if (!$this->_beforeDeleteTrigger1($id, $old)) return false;
        return true;
    }

    protected function _afterDeleteTrigger($id, array $old)
    {
        $this->_afterDeleteTrigger1($id, $old);
    }
}