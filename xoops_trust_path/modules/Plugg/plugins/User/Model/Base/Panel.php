<?php
/*
This file has been generated by the Sabai scaffold script. Do not edit this file directly.
If you need to customize the class, use the following file:
plugins/User/Model/Panel.php
*/
abstract class Plugg_User_Model_Base_Panel extends Sabai_Model_Entity
{
    public function __construct(Sabai_Model $model)
    {
        parent::__construct('Panel', $model);
        $this->_vars = array('panel_id' => 0, 'panel_created' => 0, 'panel_updated' => 0, 'panel_title' => null, 'panel_order' => 0, 'panel_active' => 1, 'panel_private' => 0, 'panel_default' => 0);
    }

    public function getId()
    {
        return $this->getVar('id');
    }

    public function setId($value)
    {
        $this->setVar('id', $value);
    }

    public function getTimeCreated()
    {
        return $this->getVar('created');
    }

    public function getTimeUpdated()
    {
        return $this->getVar('updated');
    }

    public function getLabel()
    {
        return $this->getVar('title');
    }

    public function addPanelwidget(Sabai_Model_Entity $entity)
    {
        if ($entity->getName() != 'Panelwidget') return false;

        return $this->_addEntity($entity);
    }

    public function removePanelwidget(Sabai_Model_Entity $entity)
    {
        if ($entity->getName() != 'Panelwidget') return;

        return $this->removePanelwidgetById($entity->getId());
    }

    public function removePanelwidgetById($id)
    {
        return $this->_removeEntityById('panelwidget_id', 'Panelwidget', $id);
    }

    public function createPanelwidget()
    {
        return $this->_createEntity('Panelwidget');
    }

    protected function _fetchPanelwidgets($limit = 0, $offset = 0, $sort = null, $order = null)
    {
        return $this->_fetchEntities('Panelwidget', $limit, $offset, $sort, $order);
    }

    protected function _fetchLastPanelwidget()
    {
        if (!isset($this->_objects['LastPanelwidget']) && $this->hasLastPanelwidget()) {
            $this->_objects['LastPanelwidget'] = $this->_fetchEntities('Panelwidget', 1, 0, 'panelwidget_created', 'DESC')->getNext();
        }
        return $this->_objects['LastPanelwidget'];
    }

    public function paginatePanelwidgets($perpage = 10, $sort = null, $order = null)
    {
        return $this->_paginateEntities('Panelwidget', $perpage, $sort, $order);
    }

    public function removePanelwidgets()
    {
        return $this->_removeEntities('Panelwidget');
    }

    public function countPanelwidgets()
    {
        return $this->_countEntities('Panelwidget');
    }

    protected function _getVar($name)
    {
        return $this->_vars['panel_' . $name];
    }

    protected function _setVar($name, $value)
    {
        switch ($name) {
        case 'id':
            $this->_vars['panel_id'] = $value;
            break;
        case 'title':
            $this->_vars['panel_title'] = trim($value);
            break;
        case 'order':
            $this->_vars['panel_order'] = $value;
            break;
        case 'active':
            $this->_vars['panel_active'] = $value;
            break;
        case 'private':
            $this->_vars['panel_private'] = $value;
            break;
        case 'default':
            $this->_vars['panel_default'] = $value;
            break;
        default:
            trigger_error(sprintf('Error trying to set value for variable %s. This variable is either read-only or does not exist for this entity', $name), E_USER_WARNING);
            return false;
        }
        return true;
    }

    protected function _get($name, $sort, $order)
    {
        switch ($name) {
        case 'title':
            return $this->getVar('title');
        case 'order':
            return $this->getVar('order');
        case 'active':
            return $this->getVar('active');
        case 'private':
            return $this->getVar('private');
        case 'default':
            return $this->getVar('default');
        case 'Panelwidgets':
            return $this->_fetchPanelwidgets(0, 0, $sort, $order);
        case 'LastPanelwidget':
            return $this->_fetchLastPanelwidget();
        }
    }

    public function __set($name, $value)
    {
        switch ($name) {
        case 'title':
            $this->setVar('title', $value);
            break;
        case 'order':
            $this->setVar('order', $value);
            break;
        case 'active':
            $this->setVar('active', $value);
            break;
        case 'private':
            $this->setVar('private', $value);
            break;
        case 'default':
            $this->setVar('default', $value);
            break;
        case 'Panelwidgets':
            $this->removePanelwidgets();
            foreach (array_keys($value) as $i) {
                $this->addPanelwidget($value[$i]);
            }
            break;
        }
    }

    public function initVar($name, $value)
    {
        switch ($name) {
        default:
            $this->_vars[$name] = $value;
            break;
        }
    }
}

abstract class Plugg_User_Model_Base_PanelRepository extends Sabai_Model_EntityRepository
{
    public function __construct(Sabai_Model $model)
    {
        parent::__construct('Panel', $model);
    }

    protected function _getCollectionByRowset(Sabai_DB_Rowset $rs)
    {
        return new Plugg_User_Model_Base_PanelsByRowset($rs, $this->_model->create('Panel'), $this->_model);
    }

    public function createCollection(array $entities = array())
    {
        return new Plugg_User_Model_Base_Panels($this->_model, $entities);
    }
}

class Plugg_User_Model_Base_PanelsByRowset extends Sabai_Model_EntityCollection_Rowset
{
    public function __construct(Sabai_DB_Rowset $rs, Sabai_Model_Entity $emptyEntity, Sabai_Model $model)
    {
        parent::__construct('Panels', $rs, $emptyEntity, $model);
    }

    protected function _loadRow(Sabai_Model_Entity $entity, array $row)
    {
        $entity->initVars($row);
    }
}

class Plugg_User_Model_Base_Panels extends Sabai_Model_EntityCollection_Array
{
    public function __construct(Sabai_Model $model, array $entities = array())
    {
        parent::__construct($model, 'Panels', $entities);
    }
}