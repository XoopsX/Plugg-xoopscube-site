<?php
/*
This file has been generated by the Sabai scaffold script. Do not edit this file directly.
If you need to customize the class, use the following file:
plugins/User/Model/Panelwidget.php
*/
abstract class Plugg_User_Model_Base_Panelwidget extends Sabai_Model_Entity
{
    public function __construct(Sabai_Model $model)
    {
        parent::__construct('Panelwidget', $model);
        $this->_vars = array('panelwidget_id' => 0, 'panelwidget_created' => 0, 'panelwidget_updated' => 0, 'panelwidget_title' => null, 'panelwidget_order' => 0, 'panelwidget_private' => 0, 'panelwidget_position' => 0, 'panelwidget_settings' => null, 'panelwidget_panel_id' => null, 'panelwidget_widget_id' => null);
    }

    public function getId()
    {
        return $this->getVar('id');
    }

    public function setId($value)
    {
        $this->setVar('id', $value);
    }

    public function getTimeCreated()
    {
        return $this->getVar('created');
    }

    public function getTimeUpdated()
    {
        return $this->getVar('updated');
    }

    public function assignPanel(Sabai_Model_Entity $entity)
    {
        if ($entity->getName() != 'Panel') return false;

        return $this->_assignEntity($entity, 'panel_id');
    }

    public function unassignPanel()
    {
        return $this->_unassignEntity('Panel', 'panel_id');
    }

    protected function _fetchPanel()
    {
        return $this->_fetchEntity('Panel', 'panel_id');
    }

    public function assignWidget(Sabai_Model_Entity $entity)
    {
        if ($entity->getName() != 'Widget') return false;

        return $this->_assignEntity($entity, 'widget_id');
    }

    public function unassignWidget()
    {
        return $this->_unassignEntity('Widget', 'widget_id');
    }

    protected function _fetchWidget()
    {
        return $this->_fetchEntity('Widget', 'widget_id');
    }

    protected function _getVar($name)
    {
        return $this->_vars['panelwidget_' . $name];
    }

    protected function _setVar($name, $value)
    {
        switch ($name) {
        case 'id':
            $this->_vars['panelwidget_id'] = $value;
            break;
        case 'title':
            $this->_vars['panelwidget_title'] = trim($value);
            break;
        case 'order':
            $this->_vars['panelwidget_order'] = $value;
            break;
        case 'private':
            $this->_vars['panelwidget_private'] = $value;
            break;
        case 'position':
            $this->_vars['panelwidget_position'] = $value;
            break;
        case 'settings':
            $this->_vars['panelwidget_settings'] = trim($value);
            break;
        case 'panel_id':
            $this->_vars['panelwidget_panel_id'] = $value;
            break;
        case 'widget_id':
            $this->_vars['panelwidget_widget_id'] = $value;
            break;
        default:
            trigger_error(sprintf('Error trying to set value for variable %s. This variable is either read-only or does not exist for this entity', $name), E_USER_WARNING);
            return false;
        }
        return true;
    }

    protected function _get($name, $sort, $order)
    {
        switch ($name) {
        case 'title':
            return $this->getVar('title');
        case 'order':
            return $this->getVar('order');
        case 'private':
            return $this->getVar('private');
        case 'position':
            return $this->getVar('position');
        case 'settings':
            return $this->getVar('settings');
        case 'Panel':
            return $this->_fetchPanel();
        case 'Widget':
            return $this->_fetchWidget();
        }
    }

    public function __set($name, $value)
    {
        switch ($name) {
        case 'title':
            $this->setVar('title', $value);
            break;
        case 'order':
            $this->setVar('order', $value);
            break;
        case 'private':
            $this->setVar('private', $value);
            break;
        case 'position':
            $this->setVar('position', $value);
            break;
        case 'settings':
            $this->setVar('settings', $value);
            break;
        case 'Panel':
            $entity = is_array($value) ? $value[0] : $value;
            $this->assignPanel($entity);
            break;
        case 'Widget':
            $entity = is_array($value) ? $value[0] : $value;
            $this->assignWidget($entity);
            break;
        }
    }

    public function initVar($name, $value)
    {
        switch ($name) {
        default:
            $this->_vars[$name] = $value;
            break;
        }
    }
}

abstract class Plugg_User_Model_Base_PanelwidgetRepository extends Sabai_Model_EntityRepository
{
    public function __construct(Sabai_Model $model)
    {
        parent::__construct('Panelwidget', $model);
    }

    public function fetchByPanel($id, $limit = 0, $offset = 0, $sort = null, $order = null)
    {
        return $this->_fetchByForeign('panelwidget_panel_id', $id, $limit, $offset, $sort, $order);
    }

    public function paginateByPanel($id, $perpage = 10, $sort = null, $order = null)
    {
        return $this->_paginateByEntity('Panel', $id, $perpage, $sort, $order);
    }

    public function countByPanel($id)
    {
        return $this->_countByForeign('panelwidget_panel_id', $id);
    }

    public function fetchByPanelAndCriteria($id, Sabai_Model_Criteria $criteria, $limit = 0, $offset = 0, $sort = null, $order = null)
    {
        return $this->_fetchByForeignAndCriteria('panelwidget_panel_id', $id, $criteria, $limit, $offset, $sort, $order);
    }

    public function paginateByPanelAndCriteria($id, Sabai_Model_Criteria $criteria, $perpage = 10, $sort = null, $order = null)
    {
        return $this->_paginateByEntityAndCriteria('Panel', $id, $criteria, $perpage, $sort, $order);
    }

    public function countByPanelAndCriteria($id, Sabai_Model_Criteria $criteria)
    {
        return $this->_countByForeignAndCriteria('panelwidget_panel_id', $id, $criteria);
    }

    public function fetchByWidget($id, $limit = 0, $offset = 0, $sort = null, $order = null)
    {
        return $this->_fetchByForeign('panelwidget_widget_id', $id, $limit, $offset, $sort, $order);
    }

    public function paginateByWidget($id, $perpage = 10, $sort = null, $order = null)
    {
        return $this->_paginateByEntity('Widget', $id, $perpage, $sort, $order);
    }

    public function countByWidget($id)
    {
        return $this->_countByForeign('panelwidget_widget_id', $id);
    }

    public function fetchByWidgetAndCriteria($id, Sabai_Model_Criteria $criteria, $limit = 0, $offset = 0, $sort = null, $order = null)
    {
        return $this->_fetchByForeignAndCriteria('panelwidget_widget_id', $id, $criteria, $limit, $offset, $sort, $order);
    }

    public function paginateByWidgetAndCriteria($id, Sabai_Model_Criteria $criteria, $perpage = 10, $sort = null, $order = null)
    {
        return $this->_paginateByEntityAndCriteria('Widget', $id, $criteria, $perpage, $sort, $order);
    }

    public function countByWidgetAndCriteria($id, Sabai_Model_Criteria $criteria)
    {
        return $this->_countByForeignAndCriteria('panelwidget_widget_id', $id, $criteria);
    }

    protected function _getCollectionByRowset(Sabai_DB_Rowset $rs)
    {
        return new Plugg_User_Model_Base_PanelwidgetsByRowset($rs, $this->_model->create('Panelwidget'), $this->_model);
    }

    public function createCollection(array $entities = array())
    {
        return new Plugg_User_Model_Base_Panelwidgets($this->_model, $entities);
    }
}

class Plugg_User_Model_Base_PanelwidgetsByRowset extends Sabai_Model_EntityCollection_Rowset
{
    public function __construct(Sabai_DB_Rowset $rs, Sabai_Model_Entity $emptyEntity, Sabai_Model $model)
    {
        parent::__construct('Panelwidgets', $rs, $emptyEntity, $model);
    }

    protected function _loadRow(Sabai_Model_Entity $entity, array $row)
    {
        $entity->initVars($row);
    }
}

class Plugg_User_Model_Base_Panelwidgets extends Sabai_Model_EntityCollection_Array
{
    public function __construct(Sabai_Model $model, array $entities = array())
    {
        parent::__construct($model, 'Panelwidgets', $entities);
    }
}