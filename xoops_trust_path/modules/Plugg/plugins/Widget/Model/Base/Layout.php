<?php
/*
This file has been generated by the Sabai scaffold script. Do not edit this file directly.
If you need to customize the class, use the following file:
plugins/Widget/Model/Layout.php
*/
abstract class Plugg_Widget_Model_Base_Layout extends Sabai_Model_Entity
{
    public function __construct(Sabai_Model $model)
    {
        parent::__construct('Layout', $model);
        $this->_vars = array('layout_id' => 0, 'layout_created' => 0, 'layout_updated' => 0, 'layout_plugin' => null, 'layout_type' => 0);
    }

    public function getId()
    {
        return $this->getVar('id');
    }

    public function setId($value)
    {
        $this->setVar('id', $value);
    }

    public function getTimeCreated()
    {
        return $this->getVar('created');
    }

    public function getTimeUpdated()
    {
        return $this->getVar('updated');
    }

    public function addConfig(Sabai_Model_Entity $entity)
    {
        if ($entity->getName() != 'Config') return false;

        return $this->_addEntity($entity);
    }

    public function removeConfig(Sabai_Model_Entity $entity)
    {
        if ($entity->getName() != 'Config') return;

        return $this->removeConfigById($entity->getId());
    }

    public function removeConfigById($id)
    {
        return $this->_removeEntityById('config_id', 'Config', $id);
    }

    public function createConfig()
    {
        return $this->_createEntity('Config');
    }

    protected function _fetchConfigs($limit = 0, $offset = 0, $sort = null, $order = null)
    {
        return $this->_fetchEntities('Config', $limit, $offset, $sort, $order);
    }

    protected function _fetchLastConfig()
    {
        if (!isset($this->_objects['LastConfig']) && $this->hasLastConfig()) {
            $this->_objects['LastConfig'] = $this->_fetchEntities('Config', 1, 0, 'config_created', 'DESC')->getNext();
        }
        return $this->_objects['LastConfig'];
    }

    public function paginateConfigs($perpage = 10, $sort = null, $order = null)
    {
        return $this->_paginateEntities('Config', $perpage, $sort, $order);
    }

    public function removeConfigs()
    {
        return $this->_removeEntities('Config');
    }

    public function countConfigs()
    {
        return $this->_countEntities('Config');
    }

    protected function _getVar($name)
    {
        return $this->_vars['layout_' . $name];
    }

    protected function _setVar($name, $value)
    {
        switch ($name) {
        case 'id':
            $this->_vars['layout_id'] = $value;
            break;
        case 'plugin':
            $this->_vars['layout_plugin'] = trim($value);
            break;
        case 'type':
            $this->_vars['layout_type'] = $value;
            break;
        default:
            trigger_error(sprintf('Error trying to set value for variable %s. This variable is either read-only or does not exist for this entity', $name), E_USER_WARNING);
            return false;
        }
        return true;
    }

    protected function _get($name, $sort, $order)
    {
        switch ($name) {
        case 'plugin':
            return $this->getVar('plugin');
        case 'type':
            return $this->getVar('type');
        case 'Configs':
            return $this->_fetchConfigs(0, 0, $sort, $order);
        case 'LastConfig':
            return $this->_fetchLastConfig();
        }
    }

    public function __set($name, $value)
    {
        switch ($name) {
        case 'plugin':
            $this->setVar('plugin', $value);
            break;
        case 'type':
            $this->setVar('type', $value);
            break;
        case 'Configs':
            $this->removeConfigs();
            foreach (array_keys($value) as $i) {
                $this->addConfig($value[$i]);
            }
            break;
        }
    }

    public function initVar($name, $value)
    {
        switch ($name) {
        default:
            $this->_vars[$name] = $value;
            break;
        }
    }
}

abstract class Plugg_Widget_Model_Base_LayoutRepository extends Sabai_Model_EntityRepository
{
    public function __construct(Sabai_Model $model)
    {
        parent::__construct('Layout', $model);
    }

    protected function _getCollectionByRowset(Sabai_DB_Rowset $rs)
    {
        return new Plugg_Widget_Model_Base_LayoutsByRowset($rs, $this->_model->create('Layout'), $this->_model);
    }

    public function createCollection(array $entities = array())
    {
        return new Plugg_Widget_Model_Base_Layouts($this->_model, $entities);
    }
}

class Plugg_Widget_Model_Base_LayoutsByRowset extends Sabai_Model_EntityCollection_Rowset
{
    public function __construct(Sabai_DB_Rowset $rs, Sabai_Model_Entity $emptyEntity, Sabai_Model $model)
    {
        parent::__construct('Layouts', $rs, $emptyEntity, $model);
    }

    protected function _loadRow(Sabai_Model_Entity $entity, array $row)
    {
        $entity->initVars($row);
    }
}

class Plugg_Widget_Model_Base_Layouts extends Sabai_Model_EntityCollection_Array
{
    public function __construct(Sabai_Model $model, array $entities = array())
    {
        parent::__construct($model, 'Layouts', $entities);
    }
}