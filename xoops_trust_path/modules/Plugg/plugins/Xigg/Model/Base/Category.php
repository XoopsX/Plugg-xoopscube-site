<?php
/*
This file has been generated by the Sabai scaffold script. Do not edit this file directly.
If you need to customize the class, use the following file:
plugins/Xigg/Model/Category.php
*/
require_once 'Sabai/Model/TreeEntity.php';

abstract class Plugg_Xigg_Model_Base_Category extends Sabai_Model_TreeEntity
{
    public function __construct(Sabai_Model $model)
    {
        parent::__construct('Category', $model);
        $this->_vars = array('category_id' => 0, 'category_created' => 0, 'category_updated' => 0, 'category_name' => null, 'category_description' => null, 'category_parent' => null, 'category_node_count' => 0, 'category_node_last' => 0, 'category_node_lasttime' => 0);
    }

    public function getId()
    {
        return $this->getVar('id');
    }

    public function setId($value)
    {
        $this->setVar('id', $value);
    }

    public function getTimeCreated()
    {
        return $this->getVar('created');
    }

    public function getTimeUpdated()
    {
        return $this->getVar('updated');
    }

    public function getLabel()
    {
        return $this->getVar('name');
    }

    public function getParentId()
    {
        return intval($this->getVar('parent'));
    }

    public function getNodeCount()
    {
        return $this->getVar('node_count');
    }

    public function hasLastNode()
    {
        $last_id = $this->getVar('node_last');
        return !empty($last_id);
    }

    public function assignParent(Sabai_Model_Entity $entity)
    {
        if ($entity->getName() != 'Category') return false;

        return $this->_assignEntity($entity, 'parent');
    }

    public function unassignParent()
    {
        return $this->_unassignEntity('Parent', 'parent');
    }

    protected function _fetchParent()
    {
        return $this->_fetchEntity('Category', 'parent');
    }

    public function addNode(Sabai_Model_Entity $entity)
    {
        if ($entity->getName() != 'Node') return false;

        return $this->_addEntity($entity);
    }

    public function removeNode(Sabai_Model_Entity $entity)
    {
        if ($entity->getName() != 'Node') return;

        return $this->removeNodeById($entity->getId());
    }

    public function removeNodeById($id)
    {
        return $this->_removeEntityById('node_id', 'Node', $id);
    }

    public function createNode()
    {
        return $this->_createEntity('Node');
    }

    protected function _fetchNodes($limit = 0, $offset = 0, $sort = null, $order = null)
    {
        return $this->_fetchEntities('Node', $limit, $offset, $sort, $order);
    }

    protected function _fetchLastNode()
    {
        if (!isset($this->_objects['LastNode']) && $this->hasLastNode()) {
            $this->_objects['LastNode'] = $this->_fetchEntities('Node', 1, 0, 'node_created', 'DESC')->getNext();
        }
        return $this->_objects['LastNode'];
    }

    public function paginateNodes($perpage = 10, $sort = null, $order = null)
    {
        return $this->_paginateEntities('Node', $perpage, $sort, $order);
    }

    public function removeNodes()
    {
        return $this->_removeEntities('Node');
    }

    public function countNodes()
    {
        return $this->_countEntities('Node');
    }

    protected function _getVar($name)
    {
        return $this->_vars['category_' . $name];
    }

    protected function _setVar($name, $value)
    {
        switch ($name) {
        case 'id':
            $this->_vars['category_id'] = $value;
            break;
        case 'name':
            $this->_vars['category_name'] = trim($value);
            break;
        case 'description':
            $this->_vars['category_description'] = trim($value);
            break;
        case 'parent':
            $this->_vars['category_parent'] = $value;
            break;
        case 'node_count':
            $this->_vars['category_node_count'] = $value;
            break;
        case 'node_last':
            $this->_vars['category_node_last'] = $value;
            break;
        case 'node_lasttime':
            $this->_vars['category_node_lasttime'] = $value;
            break;
        default:
            trigger_error(sprintf('Error trying to set value for variable %s. This variable is either read-only or does not exist for this entity', $name), E_USER_WARNING);
            return false;
        }
        return true;
    }

    protected function _get($name, $sort, $order)
    {
        switch ($name) {
        case 'name':
            return $this->getVar('name');
        case 'description':
            return $this->getVar('description');
        case 'Parent':
            return $this->_fetchParent();
        case 'Nodes':
            return $this->_fetchNodes(0, 0, $sort, $order);
        case 'LastNode':
            return $this->_fetchLastNode();
        case 'Children':
            return $this->_fetchChildren();
        }
    }

    public function __set($name, $value)
    {
        switch ($name) {
        case 'name':
            $this->setVar('name', $value);
            break;
        case 'description':
            $this->setVar('description', $value);
            break;
        case 'Parent':
            $entity = is_array($value) ? $value[0] : $value;
            $this->assignParent($entity);
            break;
        case 'Nodes':
            $this->removeNodes();
            foreach (array_keys($value) as $i) {
                $this->addNode($value[$i]);
            }
            break;
        }
    }

    public function initVar($name, $value)
    {
        switch ($name) {
        default:
            $this->_vars[$name] = $value;
            break;
        }
    }
}

require_once 'Sabai/Model/TreeEntityRepository.php';

abstract class Plugg_Xigg_Model_Base_CategoryRepository extends Sabai_Model_TreeEntityRepository
{
    public function __construct(Sabai_Model $model)
    {
        parent::__construct('Category', $model);
    }

    public function fetchByParent($id, $limit = 0, $offset = 0, $sort = null, $order = null)
    {
        return $this->_fetchByForeign('category_parent', $id, $limit, $offset, $sort, $order);
    }

    public function paginateByParent($id, $perpage = 10, $sort = null, $order = null)
    {
        return $this->_paginateByEntity('Parent', $id, $perpage, $sort, $order);
    }

    public function countByParent($id)
    {
        return $this->_countByForeign('category_parent', $id);
    }

    public function fetchByParentAndCriteria($id, Sabai_Model_Criteria $criteria, $limit = 0, $offset = 0, $sort = null, $order = null)
    {
        return $this->_fetchByForeignAndCriteria('category_parent', $id, $criteria, $limit, $offset, $sort, $order);
    }

    public function paginateByParentAndCriteria($id, Sabai_Model_Criteria $criteria, $perpage = 10, $sort = null, $order = null)
    {
        return $this->_paginateByEntityAndCriteria('Parent', $id, $criteria, $perpage, $sort, $order);
    }

    public function countByParentAndCriteria($id, Sabai_Model_Criteria $criteria)
    {
        return $this->_countByForeignAndCriteria('category_parent', $id, $criteria);
    }

    protected function _getCollectionByRowset(Sabai_DB_Rowset $rs)
    {
        return new Plugg_Xigg_Model_Base_CategoriesByRowset($rs, $this->_model->create('Category'), $this->_model);
    }

    public function createCollection(array $entities = array())
    {
        return new Plugg_Xigg_Model_Base_Categories($this->_model, $entities);
    }
}

class Plugg_Xigg_Model_Base_CategoriesByRowset extends Sabai_Model_EntityCollection_Rowset
{
    public function __construct(Sabai_DB_Rowset $rs, Sabai_Model_Entity $emptyEntity, Sabai_Model $model)
    {
        parent::__construct('Categories', $rs, $emptyEntity, $model);
    }

    protected function _loadRow(Sabai_Model_Entity $entity, array $row)
    {
        $entity->initVars($row);
        if (isset($row['level'])) {
            $entity->setParentsCount($row['level']);
        }
        $entity->left = $row['tree_left'];
        $entity->right = $row['tree_right'];
    }
}

class Plugg_Xigg_Model_Base_Categories extends Sabai_Model_EntityCollection_Array
{
    public function __construct(Sabai_Model $model, array $entities = array())
    {
        parent::__construct($model, 'Categories', $entities);
    }
}