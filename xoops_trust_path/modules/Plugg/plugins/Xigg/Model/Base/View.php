<?php
/*
This file has been generated by the Sabai scaffold script. Do not edit this file directly.
If you need to customize the class, use the following file:
plugins/Xigg/Model/View.php
*/
abstract class Plugg_Xigg_Model_Base_View extends Sabai_Model_Entity
{
    public function __construct(Sabai_Model $model)
    {
        parent::__construct('View', $model);
        $this->_vars = array('view_id' => 0, 'view_created' => 0, 'view_updated' => 0, 'view_uid' => null, 'view_last' => 0, 'view_node_id' => null);
    }

    public function getId()
    {
        return $this->getVar('id');
    }

    public function setId($value)
    {
        $this->setVar('id', $value);
    }

    public function getTimeCreated()
    {
        return $this->getVar('created');
    }

    public function getTimeUpdated()
    {
        return $this->getVar('updated');
    }

    public function assignNode(Sabai_Model_Entity $entity)
    {
        if ($entity->getName() != 'Node') return false;

        return $this->_assignEntity($entity, 'node_id');
    }

    public function unassignNode()
    {
        return $this->_unassignEntity('Node', 'node_id');
    }

    protected function _fetchNode()
    {
        return $this->_fetchEntity('Node', 'node_id');
    }

    protected function _getVar($name)
    {
        return $this->_vars['view_' . $name];
    }

    protected function _setVar($name, $value)
    {
        switch ($name) {
        case 'id':
            $this->_vars['view_id'] = $value;
            break;
        case 'uid':
            $this->_vars['view_uid'] = trim($value);
            break;
        case 'last':
            $this->_vars['view_last'] = $value;
            break;
        case 'node_id':
            $this->_vars['view_node_id'] = $value;
            break;
        default:
            trigger_error(sprintf('Error trying to set value for variable %s. This variable is either read-only or does not exist for this entity', $name), E_USER_WARNING);
            return false;
        }
        return true;
    }

    protected function _get($name, $sort, $order)
    {
        switch ($name) {
        case 'uid':
            return $this->getVar('uid');
        case 'last':
            return $this->getVar('last');
        case 'Node':
            return $this->_fetchNode();
        }
    }

    public function __set($name, $value)
    {
        switch ($name) {
        case 'uid':
            $this->setVar('uid', $value);
            break;
        case 'last':
            $this->setVar('last', $value);
            break;
        case 'Node':
            $entity = is_array($value) ? $value[0] : $value;
            $this->assignNode($entity);
            break;
        }
    }

    public function initVar($name, $value)
    {
        switch ($name) {
        default:
            $this->_vars[$name] = $value;
            break;
        }
    }
}

abstract class Plugg_Xigg_Model_Base_ViewRepository extends Sabai_Model_EntityRepository
{
    public function __construct(Sabai_Model $model)
    {
        parent::__construct('View', $model);
    }

    public function fetchByNode($id, $limit = 0, $offset = 0, $sort = null, $order = null)
    {
        return $this->_fetchByForeign('view_node_id', $id, $limit, $offset, $sort, $order);
    }

    public function paginateByNode($id, $perpage = 10, $sort = null, $order = null)
    {
        return $this->_paginateByEntity('Node', $id, $perpage, $sort, $order);
    }

    public function countByNode($id)
    {
        return $this->_countByForeign('view_node_id', $id);
    }

    public function fetchByNodeAndCriteria($id, Sabai_Model_Criteria $criteria, $limit = 0, $offset = 0, $sort = null, $order = null)
    {
        return $this->_fetchByForeignAndCriteria('view_node_id', $id, $criteria, $limit, $offset, $sort, $order);
    }

    public function paginateByNodeAndCriteria($id, Sabai_Model_Criteria $criteria, $perpage = 10, $sort = null, $order = null)
    {
        return $this->_paginateByEntityAndCriteria('Node', $id, $criteria, $perpage, $sort, $order);
    }

    public function countByNodeAndCriteria($id, Sabai_Model_Criteria $criteria)
    {
        return $this->_countByForeignAndCriteria('view_node_id', $id, $criteria);
    }

    protected function _getCollectionByRowset(Sabai_DB_Rowset $rs)
    {
        return new Plugg_Xigg_Model_Base_ViewsByRowset($rs, $this->_model->create('View'), $this->_model);
    }

    public function createCollection(array $entities = array())
    {
        return new Plugg_Xigg_Model_Base_Views($this->_model, $entities);
    }
}

class Plugg_Xigg_Model_Base_ViewsByRowset extends Sabai_Model_EntityCollection_Rowset
{
    public function __construct(Sabai_DB_Rowset $rs, Sabai_Model_Entity $emptyEntity, Sabai_Model $model)
    {
        parent::__construct('Views', $rs, $emptyEntity, $model);
    }

    protected function _loadRow(Sabai_Model_Entity $entity, array $row)
    {
        $entity->initVars($row);
    }
}

class Plugg_Xigg_Model_Base_Views extends Sabai_Model_EntityCollection_Array
{
    public function __construct(Sabai_Model $model, array $entities = array())
    {
        parent::__construct($model, 'Views', $entities);
    }
}